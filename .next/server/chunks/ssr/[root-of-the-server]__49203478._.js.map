{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApps, type FirebaseApp } from 'firebase/app';\nimport { getAuth, browserLocalPersistence, setPersistence } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n};\n\nif (typeof window !== 'undefined') {\n  console.log(\"Firebase config being used by client-side SDK:\", firebaseConfig);\n  if (!firebaseConfig.apiKey || !firebaseConfig.projectId) {\n    console.error(\"CRITICAL: Firebase API Key or Project ID is missing. Check your .env file and ensure it's loaded correctly for the client (NEXT_PUBLIC_ prefix).\");\n  }\n  if (firebaseConfig.storageBucket && !firebaseConfig.storageBucket.endsWith('.appspot.com')) {\n    console.warn(`POTENTIAL CONFIG ISSUE: Your NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET value is \"${firebaseConfig.storageBucket}\". It typically should end with \".appspot.com\" (e.g., \"${firebaseConfig.projectId || 'your-project-id'}.appspot.com\"). Please verify this in your .env file and Firebase project settings.`);\n  }\n}\n\nlet app: FirebaseApp;\n\nif (!getApps().length) {\n  try {\n    app = initializeApp(firebaseConfig);\n    if (typeof window !== 'undefined') {\n      console.log(\"Firebase app initialized successfully.\");\n      console.log(`Initialized Firebase app name: ${app.name}`); // Default is \"[DEFAULT]\"\n      console.log(`Initialized Firebase app Project ID from options: ${app.options.projectId}`);\n    }\n  } catch (e) {\n    console.error(\"Error initializing Firebase app:\", e);\n    // It's often better not to throw here in client-side code if you want the app to attempt to run partially\n    // throw e; \n  }\n} else {\n  app = getApps()[0]!;\n  if (typeof window !== 'undefined') {\n    console.log(\"Firebase app already initialized.\");\n    console.log(`Reusing Firebase app name: ${app.name}`);\n    console.log(`Reusing Firebase app Project ID from options: ${app.options.projectId}`);\n  }\n}\n\nconst auth = getAuth(app!); // Add non-null assertion if app could be undefined due to caught error\n\nif (typeof window !== 'undefined' && app!) { // ensure app is initialized\n  setPersistence(auth, browserLocalPersistence)\n    .then(() => {\n      console.log(\"Firebase auth persistence explicitly set to 'local'.\");\n    })\n    .catch((error) => {\n      console.error(\"Error setting Firebase auth persistence:\", error);\n    });\n}\n\nconst db = getFirestore(app!); // Add non-null assertion\n\nexport { app, auth, db };\n"],"names":[],"mappings":";;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEA,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,aAAa;AACf;AAEA,uCAAmC;;AAQnC;AAEA,IAAI;AAEJ,IAAI,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,IAAI;QACF,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;QACpB,uCAAmC;;QAInC;IACF,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,oCAAoC;IAClD,0GAA0G;IAC1G,YAAY;IACd;AACF,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,GAAG,CAAC,EAAE;IAClB,uCAAmC;;IAInC;AACF;AAEA,MAAM,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE,MAAO,uEAAuE;AAEnG,uCAA2C;;AAQ3C;AAEA,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE,MAAO,yBAAyB","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/schemas.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\nexport const SignUpSchema = z.object({\n  firstName: z.string().min(1, { message: 'First name is required.' }).max(50, { message: 'First name is too long.' }),\n  lastName: z.string().min(1, { message: 'Last name is required.' }).max(50, { message: 'Last name is too long.' }),\n  email: z.string().email({ message: 'Invalid email address.' }),\n  password: z.string().min(6, { message: 'Password must be at least 6 characters long.' }),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match.\",\n  path: ['confirmPassword'],\n});\n\nexport type SignUpInput = z.infer<typeof SignUpSchema>;\n\nexport const SignInSchema = z.object({\n  email: z.string().email({ message: 'Invalid email address.' }),\n  password: z.string().min(1, { message: 'Password is required.' }),\n});\n\nexport type SignInInput = z.infer<typeof SignInSchema>;\n\nexport const UserProfileSchema = z.object({\n  firstName: z.string().min(1, { message: 'First name cannot be empty.' }).max(50, { message: 'First name is too long.' }).optional().or(z.literal('')),\n  lastName: z.string().min(1, { message: 'Last name cannot be empty.' }).max(50, { message: 'Last name is too long.' }).optional().or(z.literal('')),\n  phoneNumber: z.string().max(20, { message: 'Phone number must be 20 characters or less.' })\n    .regex(/^$|^(\\+?[1-9]\\d{1,14})$/, { message: \"Invalid phone number format. Should be empty or like +1234567890\" }) // Allows empty or E.164 format\n    .optional().or(z.literal('')),\n});\n\nexport type UserProfileInput = z.infer<typeof UserProfileSchema>;\n\nexport const AddressSchema = z.object({\n  id: z.string().optional(), // For identifying address to update/delete\n  fullName: z.string().min(1, 'Full name is required.').max(100, 'Full name is too long.'),\n  addressLine1: z.string().min(1, 'Address line 1 is required.').max(200, 'Address line 1 is too long.'),\n  addressLine2: z.string().max(200, 'Address line 2 is too long.').optional().or(z.literal('')),\n  city: z.string().min(1, 'City is required.').max(100, 'City name is too long.'),\n  state: z.string().min(1, 'State/Province is required.').max(100, 'State/Province is too long.'),\n  postalCode: z.string().min(1, 'Postal code is required.').max(20, 'Postal code is too long.'),\n  country: z.string().min(1, 'Country is required.').max(100, 'Country name is too long.'),\n  phoneNumber: z.string().max(20, 'Phone number must be 20 characters or less.')\n    .regex(/^$|^(\\+?[1-9]\\d{1,14})$/, { message: \"Invalid phone number format. Should be empty or like +1234567890\" })\n    .optional().or(z.literal('')),\n});\n\nexport type AddressInput = z.infer<typeof AddressSchema>;\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/profile/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { User } from 'firebase/auth';\nimport { auth, db } from '@/lib/firebase';\nimport { UserProfileSchema, AddressSchema } from '@/lib/schemas';\nimport type { UserProfile, Address, Order } from '@/lib/types';\nimport { doc, getDoc, setDoc, updateDoc, collection, addDoc, getDocs, deleteDoc, query, orderBy } from 'firebase/firestore';\nimport { revalidatePath } from 'next/cache';\n\nexport interface FormState {\n  message: string | null;\n  errors?: Record<string, string[] | undefined> & { _form?: string[] };\n  success: boolean;\n  data?: any;\n}\n\n// --- User Profile Actions ---\n\nexport async function createUserProfileDocument(uid: string, email: string, firstName: string, lastName: string, phoneNumber?: string): Promise<void> {\n  const profileDocRef = doc(db, 'userProfiles', uid);\n  const newProfileData: UserProfile = { \n    uid: uid,\n    email: email,\n    firstName: firstName,\n    lastName: lastName,\n    phoneNumber: phoneNumber || null,\n  };\n  await setDoc(profileDocRef, newProfileData, { merge: true }); \n}\n\n\nexport async function getUserProfile(authenticatedUser?: User | null): Promise<UserProfile | null> {\n  const userToQuery = authenticatedUser || auth.currentUser; \n  if (!userToQuery) return null;\n\n  const profileDocRef = doc(db, 'userProfiles', userToQuery.uid);\n  const profileSnap = await getDoc(profileDocRef);\n\n  if (profileSnap.exists()) {\n    const data = profileSnap.data() as Partial<UserProfile>; \n    let firstName = data.firstName;\n    let lastName = data.lastName;\n    let phoneNumber = data.phoneNumber;\n\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      firstName = firstName || 'Ishanvi'; \n      lastName = lastName || 'Chauhan';\n      // phoneNumber will be whatever is in DB or null/undefined. No specific default phone for Ishanvi here.\n    }\n    \n    return { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: firstName || null, \n        lastName: lastName || null,\n        phoneNumber: phoneNumber || null,\n    } as UserProfile;\n  } else {\n    // New user, create profile document\n    let newFirstName = '';\n    let newLastName = '';\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      newFirstName = 'Ishanvi';\n      newLastName = 'Chauhan';\n    } else if (userToQuery.displayName) {\n        const nameParts = userToQuery.displayName.split(' ');\n        newFirstName = nameParts[0] || '';\n        newLastName = nameParts.slice(1).join(' ') || '';\n    }\n    \n    // For a brand new profile, phoneNumber will be null unless provided during signup (which it isn't currently)\n    const newProfileData: UserProfile = { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: newFirstName || null, \n        lastName: newLastName || null,\n        phoneNumber: null, // Default to null for new profiles\n    };\n    await setDoc(profileDocRef, newProfileData);\n    return newProfileData;\n  }\n}\n\nexport async function updateUserProfile(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = UserProfileSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const profileDocRef = doc(db, 'userProfiles', user.uid);\n    const dataToUpdate: Partial<Pick<UserProfile, 'firstName' | 'lastName' | 'phoneNumber'>> = {};\n\n    let firstNameToSet = validation.data.firstName;\n    let lastNameToSet = validation.data.lastName;\n    // PhoneNumber can be an empty string (to clear it) or a valid number\n    const phoneNumberToSet = validation.data.phoneNumber;\n\n\n    if (user.email === 'ishanvi.chauhan@gmail.com') {\n      firstNameToSet = firstNameToSet === '' ? 'Ishanvi' : (firstNameToSet || 'Ishanvi'); \n      lastNameToSet = lastNameToSet === '' ? 'Chauhan' : (lastNameToSet || 'Chauhan');   \n    }\n    \n    if (firstNameToSet !== undefined) dataToUpdate.firstName = firstNameToSet;\n    if (lastNameToSet !== undefined) dataToUpdate.lastName = lastNameToSet;\n    if (phoneNumberToSet !== undefined) dataToUpdate.phoneNumber = phoneNumberToSet === '' ? null : phoneNumberToSet;\n\n\n    const profileSnap = await getDoc(profileDocRef);\n    if (profileSnap.exists()) {\n        await updateDoc(profileDocRef, dataToUpdate);\n    } else {\n        await setDoc(profileDocRef, { \n            email: user.email || '', \n            ...dataToUpdate \n        });\n    }\n\n    revalidatePath('/profile');\n    return { message: 'Profile updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    return { message: 'Failed to update profile.', success: false, errors: { _form: ['Failed to update profile.'] } };\n  }\n}\n\n\n// --- Shipping Address Actions ---\nexport async function getShippingAddresses(): Promise<Address[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n\n  const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n  const addressesSnap = await getDocs(addressesColRef);\n  \n  return addressesSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Address));\n}\n\nexport async function addShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...addressDataFromSchema } = validation.data; \n    \n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await addDoc(addressesColRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address added successfully!', success: true };\n  } catch (error) {\n    console.error('Error adding address:', error);\n    return { message: 'Failed to add shipping address.', success: false, errors: { _form: ['Failed to add shipping address.'] } };\n  }\n}\n\nexport async function updateShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n  \n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  const { id: addressId, ...addressDataFromSchema } = validation.data;\n\n  if (!addressId) {\n    return { message: 'Address ID is missing for update.', success: false, errors: { _form: ['Address ID is missing.'] } };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n\n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await updateDoc(addressDocRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating address:', error);\n    return { message: 'Failed to update shipping address.', success: false, errors: { _form: ['Failed to update shipping address.'] } };\n  }\n}\n\nexport async function deleteShippingAddress(addressId: string): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false };\n  }\n  if (!addressId) {\n     return { message: 'Address ID is missing for deletion.', success: false };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n    await deleteDoc(addressDocRef);\n    revalidatePath('/profile');\n    return { message: 'Shipping address deleted successfully!', success: true };\n  } catch (error) {\n    console.error('Error deleting address:', error);\n    return { message: 'Failed to delete shipping address.', success: false };\n  }\n}\n\n// --- Order History Actions ---\nexport async function getOrderHistory(): Promise<Order[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n  \n  // This is a placeholder. In a real application, you would query a 'orders' collection\n  // filtered by userId and ordered by date.\n  // For example:\n  // const ordersColRef = collection(db, 'orders');\n  // const q = query(ordersColRef, where('userId', '==', user.uid), orderBy('orderDate', 'desc'));\n  // const ordersSnap = await getDocs(q);\n  // return ordersSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Order));\n\n  console.warn(\"getOrderHistory is a placeholder and does not fetch real order data yet.\");\n  \n  // Mock some order data for UI demonstration purposes\n  const mockOrders: Order[] = [\n    // {\n    //   id: 'mockOrder123',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n    //   items: [\n    //     { productId: 'p1', productName: 'Floral Wall Art Set', quantity: 1, price: 'Rs. 1850' },\n    //     { productId: 'p2', productName: 'Gold Sunburst Wall Décor Set', quantity: 2, price: 'Rs. 1299' },\n    //   ],\n    //   totalAmount: 1850 + (1299 * 2),\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Delivered',\n    // },\n    // {\n    //   id: 'mockOrder456',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\n    //   items: [\n    //     { productId: 'p5', productName: 'Rectangular Wall Mirror', quantity: 1, price: 'Rs. 2250' },\n    //   ],\n    //   totalAmount: 2250,\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Shipped',\n    // },\n  ];\n  // return Promise.resolve(mockOrders); // Uncomment to show mock data\n  return Promise.resolve([]); // Default to no orders\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/signin/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { UserCredential } from 'firebase/auth';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { redirect } from 'next/navigation';\nimport { SignInSchema } from '@/lib/schemas';\nimport { getUserProfile } from '@/app/profile/actions';\n\n\nexport interface SignInFormState {\n  message: string | null;\n  errors?: {\n    email?: string[];\n    password?: string[];\n    _form?: string[];\n  };\n  success: boolean;\n}\n\nexport async function signInWithEmail(prevState: SignInFormState, formData: FormData): Promise<SignInFormState> {\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = SignInSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid data. Please check your input.',\n      success: false,\n    };\n  }\n\n  const { email, password } = validation.data;\n  let userCredential: UserCredential | null = null;\n\n  try {\n    userCredential = await signInWithEmailAndPassword(auth, email, password);\n  } catch (error: any) {\n    if (error.code === 'auth/invalid-credential' || error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password' || error.code === 'auth/invalid-email') {\n      return { message: 'Invalid email or password. Please try again.', success: false, errors: { _form: ['Invalid email or password.'] } };\n    }\n    console.error('Firebase SignIn Error (Full):', JSON.stringify(error, Object.getOwnPropertyNames(error)));\n    return { message: 'An unexpected error occurred during log in. Please try again.', success: false, errors: { _form: ['An unexpected error occurred.'] } };\n  }\n  \n  let welcomeMessage = \"Welcome!\";\n  if (userCredential && userCredential.user) {\n    try {\n      // Pass the user object directly from the credential for more immediate profile fetching\n      const profile = await getUserProfile(userCredential.user); \n      if (profile && profile.firstName) {\n        welcomeMessage = `Welcome ${profile.firstName}!`;\n      }\n    } catch (profileError) {\n      console.error(\"Error fetching user profile after login:\", profileError);\n      // Fallback to generic welcome message if profile fetch fails\n    }\n  } else {\n    // This case indicates signInWithEmailAndPassword succeeded but didn't return a user credential,\n    // or an error was caught but the flow unexpectedly continued.\n    // The catch block above should typically return, preventing this.\n    console.warn(\"Login appeared to succeed, but no user credential was available for profile fetch.\");\n  }\n\n  redirect(`/?welcome_message=${encodeURIComponent(welcomeMessage)}`);\n}\n"],"names":[],"mappings":";;;;;AAIA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;AAaO,eAAe,gBAAgB,SAA0B,EAAE,QAAkB;IAClF,MAAM,cAAc,OAAO,WAAW,CAAC,SAAS,OAAO;IACvD,MAAM,aAAa,qHAAA,CAAA,eAAY,CAAC,SAAS,CAAC;IAE1C,IAAI,CAAC,WAAW,OAAO,EAAE;QACvB,OAAO;YACL,QAAQ,WAAW,KAAK,CAAC,OAAO,GAAG,WAAW;YAC9C,SAAS;YACT,SAAS;QACX;IACF;IAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,WAAW,IAAI;IAC3C,IAAI,iBAAwC;IAE5C,IAAI;QACF,iBAAiB,MAAM,CAAA,GAAA,6PAAA,CAAA,6BAA0B,AAAD,EAAE,sHAAA,CAAA,OAAI,EAAE,OAAO;IACjE,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,IAAI,KAAK,6BAA6B,MAAM,IAAI,KAAK,yBAAyB,MAAM,IAAI,KAAK,yBAAyB,MAAM,IAAI,KAAK,sBAAsB;YACnK,OAAO;gBAAE,SAAS;gBAAgD,SAAS;gBAAO,QAAQ;oBAAE,OAAO;wBAAC;qBAA6B;gBAAC;YAAE;QACtI;QACA,QAAQ,KAAK,CAAC,iCAAiC,KAAK,SAAS,CAAC,OAAO,OAAO,mBAAmB,CAAC;QAChG,OAAO;YAAE,SAAS;YAAiE,SAAS;YAAO,QAAQ;gBAAE,OAAO;oBAAC;iBAAgC;YAAC;QAAE;IAC1J;IAEA,IAAI,iBAAiB;IACrB,IAAI,kBAAkB,eAAe,IAAI,EAAE;QACzC,IAAI;YACF,wFAAwF;YACxF,MAAM,UAAU,MAAM,CAAA,GAAA,gIAAA,CAAA,iBAAc,AAAD,EAAE,eAAe,IAAI;YACxD,IAAI,WAAW,QAAQ,SAAS,EAAE;gBAChC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,SAAS,CAAC,CAAC,CAAC;YAClD;QACF,EAAE,OAAO,cAAc;YACrB,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,6DAA6D;QAC/D;IACF,OAAO;QACL,gGAAgG;QAChG,8DAA8D;QAC9D,kEAAkE;QAClE,QAAQ,IAAI,CAAC;IACf;IAEA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,iBAAiB;AACpE;;;IA7CsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 679, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/signin/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {signInWithEmail as '60f0ef11b84273ae98a251799372224b323ceb7f36'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 731, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/signin/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/signin/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/signin/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 745, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/signin/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/signin/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/signin/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuQ,GACpS,qCACA","debugId":null}},
    {"offset": {"line": 759, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}