{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApps, type FirebaseApp } from 'firebase/app';\nimport { getFirestore, type Firestore } from 'firebase/firestore';\nimport { getStorage, type FirebaseStorage } from 'firebase/storage';\n\n// Log raw environment variables as seen by this module\nconsole.log(\"--- Reading Firebase Environment Variables (src/lib/firebase.ts) ---\");\nconsole.log(\"Raw NEXT_PUBLIC_FIREBASE_API_KEY:\", process.env.NEXT_PUBLIC_FIREBASE_API_KEY || \"MISSING/undefined\");\nconsole.log(\"Raw NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN:\", process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN || \"MISSING/undefined\");\nconsole.log(\"Raw NEXT_PUBLIC_FIREBASE_PROJECT_ID:\", process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || \"MISSING/undefined\");\nconsole.log(\"Raw NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET:\", process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET || \"MISSING/undefined\");\nconsole.log(\"Raw NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID:\", process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || \"MISSING/undefined\");\nconsole.log(\"Raw NEXT_PUBLIC_FIREBASE_APP_ID:\", process.env.NEXT_PUBLIC_FIREBASE_APP_ID || \"MISSING/undefined\");\nconsole.log(\"Raw NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID:\", process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID || \"Not defined (Optional)\");\nconsole.log(\"------------------------------------------------------------------\");\n\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n};\n\n// Universal logging for the constructed Firebase configuration\nconsole.log(\"--- Firebase Configuration Object (src/lib/firebase.ts) ---\");\nconsole.log(\"Environment Type:\", typeof window !== 'undefined' ? \"Client\" : \"Server\");\nconsole.log(\"Using API Key:\", firebaseConfig.apiKey ? \"Present\" : \"MISSING or undefined in config\");\nconsole.log(\"Using Auth Domain:\", firebaseConfig.authDomain ? \"Present\" : \"MISSING or undefined in config\");\nconsole.log(\"Using Project ID:\", firebaseConfig.projectId ? \"Present\" : \"MISSING or undefined in config\");\nconsole.log(\"---------------------------------------------------------\");\n\nlet app: FirebaseApp | null = null;\nlet db: Firestore | null = null;\nlet storage: FirebaseStorage | null = null;\n\nif (!firebaseConfig.apiKey || !firebaseConfig.projectId) {\n  console.error(\n    \"CRITICAL FIREBASE CONFIG ERROR (src/lib/firebase.ts): API Key or Project ID is missing or undefined in the firebaseConfig object. Firebase services will likely be unavailable.\" +\n    \" Please ensure NEXT_PUBLIC_FIREBASE_API_KEY and NEXT_PUBLIC_FIREBASE_PROJECT_ID are correctly set in your .env file at the project root \" +\n    \"and that the Next.js server has been restarted after changes to .env.\"\n  );\n  // app, db, and storage remain null as per their initial declaration.\n} else {\n  try {\n    if (!getApps().length) {\n      app = initializeApp(firebaseConfig);\n      console.log(\"Firebase app initialized (src/lib/firebase.ts).\");\n    } else {\n      app = getApps()[0]!;\n      console.log(\"Firebase app already initialized (src/lib/firebase.ts).\");\n    }\n    // If app is successfully initialized, then initialize db and storage\n    db = getFirestore(app);\n    storage = getStorage(app);\n\n  } catch (e: any) {\n    console.error(\"FATAL ERROR initializing Firebase App (src/lib/firebase.ts):\", e.message);\n    if (e.code === 'auth/invalid-api-key' || (e.message && e.message.toLowerCase().includes('invalid-api-key'))) {\n       console.error(\n          \"Firebase Error (invalid-api-key possibly, or other init error) from src/lib/firebase.ts: This strongly suggests that your NEXT_PUBLIC_FIREBASE_API_KEY \" +\n          \"is incorrect, missing, or not accessible by the current environment. \" +\n          \"1. Verify the key in your project's root .env file against your Firebase project settings. \" +\n          \"2. Ensure the Next.js development server was restarted after any .env changes.\"\n      );\n    }\n    // app, db, and storage will remain null if initialization failed here.\n    if (typeof window !== 'undefined') {\n      console.error(\"Firebase initialization failed on the client. Some Firebase features may not work.\");\n    }\n  }\n}\n\nexport { app, db, storage };\n"],"names":[],"mappings":";;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEA,uDAAuD;AACvD,QAAQ,GAAG,CAAC;AACZ,QAAQ,GAAG,CAAC,qCAAqC,+EAA4C;AAC7F,QAAQ,GAAG,CAAC,yCAAyC,0EAAgD;AACrG,QAAQ,GAAG,CAAC,wCAAwC,0DAA+C;AACnG,QAAQ,GAAG,CAAC,4CAA4C,sEAAmD;AAC3G,QAAQ,GAAG,CAAC,iDAAiD,oDAAwD;AACrH,QAAQ,GAAG,CAAC,oCAAoC,iFAA2C;AAC3F,QAAQ,GAAG,CAAC,4CAA4C,oDAAmD;AAC3G,QAAQ,GAAG,CAAC;AAGZ,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,aAAa;AACf;AAEA,+DAA+D;AAC/D,QAAQ,GAAG,CAAC;AACZ,QAAQ,GAAG,CAAC,qBAAqB,6EAA2C;AAC5E,QAAQ,GAAG,CAAC,kBAAkB,eAAe,MAAM,GAAG,YAAY;AAClE,QAAQ,GAAG,CAAC,sBAAsB,eAAe,UAAU,GAAG,YAAY;AAC1E,QAAQ,GAAG,CAAC,qBAAqB,eAAe,SAAS,GAAG,YAAY;AACxE,QAAQ,GAAG,CAAC;AAEZ,IAAI,MAA0B;AAC9B,IAAI,KAAuB;AAC3B,IAAI,UAAkC;AAEtC,IAAI,CAAC,eAAe,MAAM,IAAI,CAAC,eAAe,SAAS,EAAE;IACvD,QAAQ,KAAK,CACX,oLACA,6IACA;AAEF,qEAAqE;AACvE,OAAO;IACL,IAAI;QACF,IAAI,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;YACrB,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;YACpB,QAAQ,GAAG,CAAC;QACd,OAAO;YACL,MAAM,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,GAAG,CAAC,EAAE;YAClB,QAAQ,GAAG,CAAC;QACd;QACA,qEAAqE;QACrE,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;QAClB,UAAU,CAAA,GAAA,oLAAA,CAAA,aAAU,AAAD,EAAE;IAEvB,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,gEAAgE,EAAE,OAAO;QACvF,IAAI,EAAE,IAAI,KAAK,0BAA2B,EAAE,OAAO,IAAI,EAAE,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC,oBAAqB;YAC1G,QAAQ,KAAK,CACV,4JACA,0EACA,gGACA;QAEN;QACA,uEAAuE;QACvE,uCAAmC;;QAEnC;IACF;AACF","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mock-data.ts"],"sourcesContent":["\nimport type { Product } from '@/lib/types';\nimport productsData from '@/lib/data/products.json';\n\n// The MOCK_PRODUCTS array is now sourced from the imported JSON data.\n// This allows for easier management of product data in a separate file.\nexport const MOCK_PRODUCTS: Product[] = productsData as Product[];\n\n    "],"names":[],"mappings":";;;AAEA;;AAIO,MAAM,gBAA2B,sGAAA,CAAA,UAAY","debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/products/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { db } from '@/lib/firebase';\nimport { collection, doc, getDoc, getDocs, query, where, limit, orderBy, setDoc, writeBatch } from 'firebase/firestore';\nimport type { Product, Review, ProductImage } from '@/lib/types';\nimport { MOCK_PRODUCTS } from '@/lib/mock-data';\n\ninterface SeedResult {\n  success: boolean;\n  message: string;\n  count?: number;\n}\n\nexport async function seedProductsToFirestore(): Promise<SeedResult> {\n  if (!db) {\n    console.error(\"seedProductsToFirestore: Firestore database instance is not available. Aborting seed.\");\n    return { success: false, message: \"Database service is not available. Seeding aborted.\" };\n  }\n  if (MOCK_PRODUCTS.length === 0) {\n    console.warn(\"seedProductsToFirestore: No mock products found to seed.\");\n    return { success: false, message: \"No mock products found to seed.\" };\n  }\n  console.log(`seedProductsToFirestore: Attempting to seed ${MOCK_PRODUCTS.length} products...`);\n\n  const batch = writeBatch(db!); // Use db!\n  let seededCount = 0;\n\n  MOCK_PRODUCTS.forEach(product => {\n    const productDocRef = doc(db!, 'products', product.id); // Use db!\n    const productData: Omit<Product, 'id'> = {\n      name: product.name,\n      description: product.description,\n      careInstructions: product.careInstructions,\n      imageUrls: product.imageUrls.map(img => ({ url: img.url, dataAiHint: img.dataAiHint } as ProductImage)),\n      price: product.price,\n      category: product.category,\n      featured: product.featured || false,\n      sizeAndDimensions: product.sizeAndDimensions,\n      material: product.material,\n      reviews: product.reviews ? product.reviews.map(r => ({ ...r } as Review)) : [],\n    };\n    batch.set(productDocRef, productData);\n    seededCount++;\n  });\n\n  try {\n    await batch.commit();\n    console.log(`seedProductsToFirestore: Successfully seeded ${seededCount} products.`);\n    return { success: true, message: `Successfully seeded ${seededCount} products to Firestore.`, count: seededCount };\n  } catch (error) {\n    console.error(\"Error seeding products to Firestore:\", error);\n    const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred during seeding.\";\n    return { success: false, message: `Failed to seed products: ${errorMessage}` };\n  }\n}\n\nexport async function getProducts(): Promise<Product[]> {\n  if (!db) {\n    console.error(\"getProducts: Firestore database instance is not available. Falling back to MOCK_PRODUCTS.\");\n    return MOCK_PRODUCTS;\n  }\n  try {\n    console.log('getProducts: Attempting to fetch products from Firestore...');\n    const productsColRef = collection(db!, 'products'); // Use db!\n    let productsSnap = await getDocs(productsColRef);\n\n    if (productsSnap.empty) {\n      console.log('getProducts: Firestore is empty. Attempting to seed database with mock data from products.json...');\n      // seedProductsToFirestore already checks for db, so no need for db! here in the call\n      const seedResult = await seedProductsToFirestore(); \n      if (seedResult.success && seedResult.count && seedResult.count > 0) {\n        console.log(`getProducts: Seeding successful: ${seedResult.message}. Re-fetching products from Firestore.`);\n        productsSnap = await getDocs(productsColRef); // productsColRef was defined with db!\n        if (productsSnap.empty) {\n          console.warn(\"getProducts: Firestore is still empty after successful seeding and re-fetch. This might indicate an issue with data propagation or Firestore rules. Falling back to MOCK_PRODUCTS (from products.json).\");\n          return MOCK_PRODUCTS;\n        }\n      } else {\n        console.error(`getProducts: Seeding failed or yielded no products: ${seedResult.message}. Falling back to MOCK_PRODUCTS (from products.json).`);\n        return MOCK_PRODUCTS;\n      }\n    }\n    \n    const products: Product[] = productsSnap.docs.map(docSnap => {\n      const data = docSnap.data();\n      return {\n        id: docSnap.id,\n        name: data.name || '',\n        description: data.description || '',\n        careInstructions: data.careInstructions || '',\n        imageUrls: data.imageUrls && data.imageUrls.length > 0 ? data.imageUrls : [{ url: 'https://placehold.co/600x400.png', dataAiHint: 'placeholder image' }],\n        price: data.price || 'Rs. 0',\n        category: data.category || 'Uncategorized',\n        featured: data.featured || false,\n        sizeAndDimensions: data.sizeAndDimensions || 'N/A',\n        material: data.material || 'N/A',\n        reviews: data.reviews || [],\n      } as Product;\n    });\n    console.log(`getProducts: Successfully fetched ${products.length} products from Firestore.`);\n    return products;\n  } catch (error) {\n    console.error(\"getProducts: Error during Firestore operation:\", error, \"Falling back to MOCK_PRODUCTS (from products.json).\");\n    return MOCK_PRODUCTS;\n  }\n}\n\nexport async function getProductById(id: string): Promise<Product | null> {\n  if (!db) {\n    console.error(`getProductById: Firestore database instance is not available for product ${id}. Returning null.`);\n    return null;\n  }\n  try {\n    console.log(`getProductById: Attempting to fetch product with ID ${id} from Firestore...`);\n    const productDocRef = doc(db!, 'products', id); // Use db!\n    const productSnap = await getDoc(productDocRef);\n\n    if (productSnap.exists()) {\n      console.log(`getProductById: Product ${id} found in Firestore.`);\n      const data = productSnap.data();\n      return {\n        id: productSnap.id,\n        name: data.name || '',\n        description: data.description || '',\n        careInstructions: data.careInstructions || '',\n        imageUrls: data.imageUrls && data.imageUrls.length > 0 ? data.imageUrls : [{ url: 'https://placehold.co/600x400.png', dataAiHint: 'placeholder image' }],\n        price: data.price || 'Rs. 0',\n        category: data.category || 'Uncategorized',\n        featured: data.featured || false,\n        sizeAndDimensions: data.sizeAndDimensions || 'N/A',\n        material: data.material || 'N/A',\n        reviews: data.reviews || [],\n      } as Product;\n    } else {\n      console.log(`getProductById: Product with ID ${id} not found in Firestore.`);\n      const productsColRef = collection(db!, 'products'); // Use db!\n      const quickCheckSnap = await getDocs(query(productsColRef, limit(1)));\n      if (quickCheckSnap.empty) {\n        console.log(`getProductById: Product ${id} not found, and products collection seems empty. Attempting to seed...`);\n        const seedResult = await seedProductsToFirestore(); // seedProductsToFirestore already checks for db\n         if (seedResult.success && seedResult.count && seedResult.count > 0) {\n            console.log(`getProductById: Seeding successful after ${id} not found. Re-fetching product ${id}.`);\n            const productSnapAfterSeed = await getDoc(productDocRef); // productDocRef defined with db!\n            if (productSnapAfterSeed.exists()) {\n              console.log(`getProductById: Product ${id} found after seeding.`);\n              const data = productSnapAfterSeed.data();\n              return {\n                id: productSnapAfterSeed.id,\n                name: data.name || '',\n                description: data.description || '',\n                careInstructions: data.careInstructions || '',\n                imageUrls: data.imageUrls && data.imageUrls.length > 0 ? data.imageUrls : [{ url: 'https://placehold.co/600x400.png', dataAiHint: 'placeholder image' }],\n                price: data.price || 'Rs. 0',\n                category: data.category || 'Uncategorized',\n                featured: data.featured || false,\n                sizeAndDimensions: data.sizeAndDimensions || 'N/A',\n                material: data.material || 'N/A',\n                reviews: data.reviews || [],\n              } as Product;\n            } else {\n              console.log(`getProductById: Product ${id} still not found after attempting to seed. Returning null.`);\n              return null;\n            }\n        } else {\n             console.error(`getProductById: Seeding failed or yielded no products when trying to find ${id}: ${seedResult.message}. Returning null.`);\n             return null;\n        }\n      }\n      console.log(`getProductById: Product ${id} not found and collection was not empty or seeding did not find it. Returning null.`);\n      return null;\n    }\n  } catch (error) {\n    console.error(`getProductById: Error fetching product with ID ${id}:`, error, \"Returning null.\");\n    return null;\n  }\n}\n\nexport async function getFeaturedProducts(count: number): Promise<Product[]> {\n  if (!db) {\n    console.error(\"getFeaturedProducts: Firestore database instance is not available. Falling back to MOCK_PRODUCTS.\");\n    return MOCK_PRODUCTS.filter(p => p.featured).slice(0, count);\n  }\n  try {\n    console.log(`getFeaturedProducts: Attempting to fetch ${count} featured products from Firestore...`);\n    const productsColRef = collection(db!, 'products'); // Use db!\n    let featuredProductsQuery = query(productsColRef, where('featured', '==', true), limit(count));\n    let productsSnap = await getDocs(featuredProductsQuery);\n\n    let productsToReturn: Product[] = [];\n\n    if (productsSnap.empty) {\n      console.log(\"getFeaturedProducts: 'featured' query returned no results. Checking if entire collection is empty for seeding...\");\n      const allProductsCheckQuery = query(productsColRef, limit(1)); // productsColRef defined with db!\n      const anyProductSnap = await getDocs(allProductsCheckQuery);\n\n      if (anyProductSnap.empty) {\n        console.log('getFeaturedProducts: Products collection is entirely empty. Attempting to seed database with mock data...');\n        const seedResult = await seedProductsToFirestore(); // seedProductsToFirestore already checks for db\n        if (seedResult.success && seedResult.count && seedResult.count > 0) {\n          console.log(`getFeaturedProducts: Seeding successful: ${seedResult.message}. Re-fetching featured products.`);\n          productsSnap = await getDocs(featuredProductsQuery); // featuredProductsQuery defined with db!\n          if (productsSnap.empty) {\n              console.warn(\"getFeaturedProducts: 'featured' query still empty after successful seed.\");\n          }\n        } else {\n          console.error(`getFeaturedProducts: Seeding failed or yielded no products: ${seedResult.message}.`);\n        }\n      }\n      \n      if (productsSnap.empty) { \n         console.log(\"getFeaturedProducts: No 'featured' products found. Falling back to a general query for any products.\");\n         const fallbackQuery = query(productsColRef, orderBy('name'), limit(count)); // productsColRef defined with db!\n         productsSnap = await getDocs(fallbackQuery);\n         if (productsSnap.empty) {\n           console.log(\"getFeaturedProducts: Fallback query also returned no results. The collection might be truly empty or seeding failed. Falling back to MOCK_PRODUCTS.\");\n           return MOCK_PRODUCTS.slice(0, count); \n         }\n      }\n    }\n    \n    productsToReturn = productsSnap.docs.map(docSnap => {\n       const data = docSnap.data();\n      return {\n        id: docSnap.id,\n        name: data.name || '',\n        description: data.description || '',\n        careInstructions: data.careInstructions || '',\n        imageUrls: data.imageUrls && data.imageUrls.length > 0 ? data.imageUrls : [{ url: 'https://placehold.co/600x400.png', dataAiHint: 'placeholder image' }],\n        price: data.price || 'Rs. 0',\n        category: data.category || 'Uncategorized',\n        featured: data.featured || false,\n        sizeAndDimensions: data.sizeAndDimensions || 'N/A',\n        material: data.material || 'N/A',\n        reviews: data.reviews || [],\n      } as Product;\n    });\n\n    if (productsToReturn.length === 0 && MOCK_PRODUCTS.length > 0) {\n        console.warn(\"getFeaturedProducts: All Firestore fetches resulted in no products. Falling back to MOCK_PRODUCTS for featured products.\");\n        return MOCK_PRODUCTS.filter(p => p.featured).slice(0, count);\n    }\n    \n    console.log(`getFeaturedProducts: Fetched ${productsToReturn.length} products.`);\n    return productsToReturn;\n\n  } catch (error) {\n    console.error(\"getFeaturedProducts: Error fetching featured products:\", error, \"Falling back to MOCK_PRODUCTS.\");\n    return MOCK_PRODUCTS.filter(p => p.featured).slice(0, count);\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/product/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getProductById as '40085e20f65caaa54feef8e67c51686a8fea0476fc'} from 'ACTIONS_MODULE0'\nexport {getProducts as '009c0e4f9c36b44a23d3734f13b4298bc7b33dd084'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 552, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/product/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/product/[id]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/product/[id]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","debugId":null}},
    {"offset": {"line": 566, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/product/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/product/[id]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/product/[id]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","debugId":null}},
    {"offset": {"line": 580, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}