{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 transition-transform duration-150 ease-out\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 hover:-translate-y-px active:translate-y-0\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90 hover:-translate-y-px active:translate-y-0\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground hover:-translate-y-px active:translate-y-0\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 hover:-translate-y-px active:translate-y-0\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground hover:-translate-y-px active:translate-y-0\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,uYACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dropdown-menu.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/sheet.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAEA;AAPA;;;;;;;AASA,MAAM,QAAQ,kKAAA,CAAA,OAAmB;AAEjC,MAAM,eAAe,kKAAA,CAAA,UAAsB;AAE3C,MAAM,aAAa,kKAAA,CAAA,QAAoB;AAEvC,MAAM,cAAc,kKAAA,CAAA,SAAqB;AAEzC,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAsB;QACrB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2JACA;QAED,GAAG,KAAK;QACT,KAAK;;;;;;AAGT,aAAa,WAAW,GAAG,kKAAA,CAAA,UAAsB,CAAC,WAAW;AAE7D,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,oMACA;IACE,UAAU;QACR,MAAM;YACJ,KAAK;YACL,QACE;YACF,MAAM;YACN,OACE;QACJ;IACF;IACA,iBAAiB;QACf,MAAM;IACR;AACF;AAOF,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,OAAO,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpD,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAsB;gBACrB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;oBAAE;gBAAK,IAAI;gBACtC,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAoB;wBAAC,WAAU;;0CAC9B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,aAAa,WAAW,GAAG,kKAAA,CAAA,UAAsB,CAAC,WAAW;AAE7D,MAAM,cAAc,CAAC,EACnB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,cAAc,CAAC,EACnB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,yCAAyC;QACtD,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG,kKAAA,CAAA,QAAoB,CAAC,WAAW;AAEzD,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA0B;QACzB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG,kKAAA,CAAA,cAA0B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,8OAAC,qKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;AAIf,UAAU,WAAW,GAAG,qKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/layout/header.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { LayoutGrid, Home, Sparkles, ShoppingCart, LogIn, UserCircle, LogOut, Menu, PlusSquare } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport type { CartItem } from '@/lib/types';\nimport { useAuth } from '@/contexts/auth-context';\nimport { auth } from '@/lib/firebase';\nimport { signOut } from 'firebase/auth';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { Separator } from '@/components/ui/separator';\n\nexport default function Header() {\n  const [cartItemCount, setCartItemCount] = useState(0);\n  const [isClient, setIsClient] = useState(false);\n  const { user, loading: authLoading } = useAuth();\n  const router = useRouter();\n  const pathname = usePathname();\n  const { toast } = useToast();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  useEffect(() => {\n    if (!isClient) return;\n\n    const calculateTotalItems = () => {\n      if (!user) { // If no user, cart count is 0\n        setCartItemCount(0);\n        return;\n      }\n      const storedCart = localStorage.getItem(`aarambhCart_${user.uid}`);\n      if (storedCart) {\n        try {\n          const items: CartItem[] = JSON.parse(storedCart);\n          const total = items.reduce((sum, item) => sum + item.quantity, 0);\n          setCartItemCount(total);\n        } catch (e) {\n          console.error(\"Failed to parse cart from localStorage\", e);\n          setCartItemCount(0);\n        }\n      } else {\n        setCartItemCount(0);\n      }\n    };\n\n    calculateTotalItems(); // Initial calculation\n\n    const handleCartUpdateEvent = () => {\n      calculateTotalItems();\n    };\n\n    // Listen for storage changes (e.g., from other tabs)\n    const handleStorageChange = (event: StorageEvent) => {\n        if (user && event.key === `aarambhCart_${user.uid}`) {\n            calculateTotalItems();\n        } else if (event.key && event.key.startsWith('aarambhCart_') && !user) {\n            // If user logged out on another tab, this tab's user would be null\n            calculateTotalItems();\n        }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    window.addEventListener('aarambhCartUpdated', handleCartUpdateEvent as EventListener);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('aarambhCartUpdated', handleCartUpdateEvent as EventListener);\n    };\n  }, [isClient, user]); // Re-run if user state changes\n\n  const handleSignOut = async () => {\n    try {\n      if (user) { \n        localStorage.removeItem(`aarambhCart_${user.uid}`);\n        localStorage.removeItem(`aarambhWishlist_${user.uid}`);\n      }\n      await signOut(auth);\n      // setUser(null) will be handled by onAuthStateChanged in AuthProvider\n      setCartItemCount(0); // Explicitly set cart count to 0 on UI\n      window.dispatchEvent(new CustomEvent('aarambhCartUpdated')); // Notify other components\n      router.push('/');\n      toast({ title: \"Signed Out\", description: \"You have been successfully signed out.\" });\n    } catch (error) {\n      console.error(\"Error signing out: \", error);\n      toast({ title: \"Sign Out Error\", description: \"Failed to sign out. Please try again.\", variant: \"destructive\" });\n    }\n    setIsMobileMenuOpen(false);\n  };\n\n  const handleAiAdvisorClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    if (pathname === '/') {\n      e.preventDefault(); \n      const section = document.getElementById('ai-decor-advisor');\n      if (section) {\n        section.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }\n    }\n    setIsMobileMenuOpen(false); \n  };\n\n  return (\n    <header className=\"py-4 px-2 md:px-4 border-b border-border/50 shadow-sm sticky top-0 bg-background/95 backdrop-blur-sm z-50\">\n      <div className=\"container mx-auto flex justify-between items-center\">\n        <Link href=\"/\" className=\"flex items-center group\" aria-label=\"Aarambh Decor Home\" onClick={() => setIsMobileMenuOpen(false)}>\n          <Image\n            src=\"https://instagram.fdel11-3.fna.fbcdn.net/v/t51.2885-19/505746725_17843352006510460_4000077421691590872_n.jpg?_nc_ht=instagram.fdel11-3.fna.fbcdn.net&_nc_cat=104&_nc_oc=Q6cZ2QGrole3olHTzDhyipLFazMcqxTH3BTY1mp1iUgGHh4vS9EKAKzwAqkfF7dIo9auedjAk-OgM_5e06tRXQpcQ518&_nc_ohc=PWAubMoouIAQ7kNvwGXkA7l&_nc_gid=FmC7UlvNMxPMW8Vr6tpdOA&edm=AP4sbd4BAAAA&ccb=7-5&oh=00_AfPdwAvgOVVQOsnHh8uHrqXaxpnddaWxkGxDWyAHrd0Uzw&oe=685472D7&_nc_sid=7a9f4b\"\n            alt=\"Aarambh Decor Logo\"\n            width={40}\n            height={40}\n            priority\n            className=\"object-contain rounded-lg transition-opacity group-hover:opacity-80\"\n          />\n           <span\n            className=\"ml-3 text-xl font-headline text-primary opacity-0 w-0 transform -translate-x-4\n                       group-hover:opacity-100 group-hover:w-auto group-hover:translate-x-0\n                       transition-all duration-500 ease-in-out overflow-hidden whitespace-nowrap\"\n          >\n            Aarambh Decor\n          </span>\n        </Link>\n\n        <div className=\"flex items-center gap-1 sm:gap-2\">\n          <nav className=\"hidden md:flex items-center gap-1 sm:gap-0\">\n            <Button asChild variant=\"ghost\">\n              <Link href=\"/\" aria-label=\"Home\">\n                <Home className=\"mr-2 h-4 w-4\" />\n                Home\n              </Link>\n            </Button>\n            <Button asChild variant=\"ghost\">\n              <Link href=\"/collections\" aria-label=\"Collections\">\n                <LayoutGrid className=\"mr-2 h-4 w-4\" />\n                Collections\n              </Link>\n            </Button>\n            <Button asChild variant=\"ghost\">\n              <Link href=\"/#ai-decor-advisor\" onClick={handleAiAdvisorClick} aria-label=\"AI Advisor\">\n                <Sparkles className=\"mr-2 h-4 w-4\" />\n                AI Advisor\n              </Link>\n            </Button>\n          </nav>\n\n          {!authLoading && user ? (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" aria-label=\"User menu\">\n                  <UserCircle className=\"h-5 w-5\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <DropdownMenuLabel className=\"font-normal\">\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium leading-none\">My Account</p>\n                    {user.email && (\n                      <p className=\"text-xs leading-none text-muted-foreground\">\n                        {user.email}\n                      </p>\n                    )}\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=\"/profile\" className=\"cursor-pointer\">\n                    <UserCircle className=\"mr-2 h-4 w-4\" />\n                    <span>Profile</span>\n                  </Link>\n                </DropdownMenuItem>\n                 <DropdownMenuItem asChild>\n                  <Link href=\"/(admin)/add-product\" className=\"cursor-pointer\">\n                    <PlusSquare className=\"mr-2 h-4 w-4\" />\n                    <span>Add Product</span>\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onSelect={handleSignOut} className=\"cursor-pointer text-destructive focus:bg-destructive/10 focus:text-destructive\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          ) : !authLoading && !user ? (\n              <div className=\"hidden md:flex items-center\">\n                <Button asChild variant=\"default\" className=\"text-primary-foreground bg-primary hover:bg-primary/90\">\n                  <Link href=\"/signin\" aria-label=\"Log In\">\n                    <LogIn className=\"mr-2 h-4 w-4\" />\n                    Log In\n                  </Link>\n                </Button>\n              </div>\n          ) : (\n             <div className=\"w-10 h-10 md:w-auto md:min-w-[88px]\"></div> \n          )}\n\n          <Button asChild variant=\"ghost\" className=\"relative\" size=\"icon\">\n            <Link href=\"/cart\" aria-label=\"View Cart\">\n              <ShoppingCart className=\"h-5 w-5\" />\n              {isClient && user && cartItemCount > 0 && (\n                <span className=\"absolute top-0 right-0 inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold leading-none text-primary-foreground transform translate-x-1/2 -translate-y-1/2 bg-primary rounded-full min-w-[1.25rem] h-5\">\n                  {cartItemCount}\n                </span>\n              )}\n            </Link>\n          </Button>\n\n          <div className=\"md:hidden\">\n            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" aria-label=\"Open menu\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[280px] sm:w-[300px] p-4 flex flex-col\">\n                <SheetHeader className=\"mb-6 pb-3 border-b border-border\">\n                  <SheetTitle>\n                    <Link href=\"/\" onClick={() => setIsMobileMenuOpen(false)} className=\"flex items-center group\">\n                      <Image\n                        src=\"https://instagram.fdel11-3.fna.fbcdn.net/v/t51.2885-19/505746725_17843352006510460_4000077421691590872_n.jpg?_nc_ht=instagram.fdel11-3.fna.fbcdn.net&_nc_cat=104&_nc_oc=Q6cZ2QGrole3olHTzDhyipLFazMcqxTH3BTY1mp1iUgGHh4vS9EKAKzwAqkfF7dIo9auedjAk-OgM_5e06tRXQpcQ518&_nc_ohc=PWAubMoouIAQ7kNvwGXkA7l&_nc_gid=FmC7UlvNMxPMW8Vr6tpdOA&edm=AP4sbd4BAAAA&ccb=7-5&oh=00_AfPdwAvgOVVQOsnHh8uHrqXaxpnddaWxkGxDWyAHrd0Uzw&oe=685472D7&_nc_sid=7a9f4b\"\n                        alt=\"Aarambh Decor Logo\"\n                        width={36}\n                        height={36}\n                        priority\n                        className=\"object-contain rounded-lg\"\n                      />\n                      <span className=\"ml-2 text-lg font-headline text-primary\">Aarambh Decor</span>\n                    </Link>\n                  </SheetTitle>\n                </SheetHeader>\n                <nav className=\"flex flex-col space-y-1 flex-grow\">\n                  <Button asChild variant=\"ghost\" className=\"w-full justify-start text-base py-3 px-2\" onClick={() => setIsMobileMenuOpen(false)}>\n                    <Link href=\"/\" aria-label=\"Home\">\n                      <Home className=\"mr-3 h-5 w-5 text-primary\" /> Home\n                    </Link>\n                  </Button>\n                  <Button asChild variant=\"ghost\" className=\"w-full justify-start text-base py-3 px-2\" onClick={() => setIsMobileMenuOpen(false)}>\n                    <Link href=\"/collections\" aria-label=\"Collections\">\n                      <LayoutGrid className=\"mr-3 h-5 w-5 text-primary\" /> Collections\n                    </Link>\n                  </Button>\n                  <Button asChild variant=\"ghost\" className=\"w-full justify-start text-base py-3 px-2\">\n                    <Link href=\"/#ai-decor-advisor\" aria-label=\"AI Advisor\" onClick={handleAiAdvisorClick}>\n                      <Sparkles className=\"mr-3 h-5 w-5 text-primary\" /> AI Advisor\n                    </Link>\n                  </Button>\n                </nav>\n                \n                <Separator className=\"my-4\" />\n                <div className=\"flex flex-col space-y-1\">\n                  {!authLoading && user ? (\n                    <>\n                      <Button asChild variant=\"ghost\" className=\"w-full justify-start text-base py-3 px-2\" onClick={() => setIsMobileMenuOpen(false)}>\n                        <Link href=\"/profile\" aria-label=\"Profile\">\n                          <UserCircle className=\"mr-3 h-5 w-5 text-primary\" /> Profile\n                        </Link>\n                      </Button>\n                      <Button asChild variant=\"ghost\" className=\"w-full justify-start text-base py-3 px-2\" onClick={() => setIsMobileMenuOpen(false)}>\n                        <Link href=\"/(admin)/add-product\" aria-label=\"Add Product\">\n                          <PlusSquare className=\"mr-3 h-5 w-5 text-primary\" /> Add Product\n                        </Link>\n                      </Button>\n                      <Button variant=\"ghost\" className=\"w-full justify-start text-base py-3 px-2 text-destructive focus:text-destructive hover:text-destructive\" onClick={handleSignOut}>\n                        <LogOut className=\"mr-3 h-5 w-5\" /> Log Out\n                      </Button>\n                    </>\n                  ) : !authLoading && !user ? (\n                    <Button asChild variant=\"ghost\" className=\"w-full justify-start text-base py-3 px-2\" onClick={() => setIsMobileMenuOpen(false)}>\n                      <Link href=\"/signin\" aria-label=\"Log In\">\n                        <LogIn className=\"mr-3 h-5 w-5 text-primary\" /> Log In\n                      </Link>\n                    </Button>\n                  ) : null }\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div> \n      </div>\n    </header>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1310, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mock-data.ts"],"sourcesContent":["\nimport type { Product } from '@/lib/types';\nimport productsData from '@/lib/data/products.json';\n\n// The MOCK_PRODUCTS array is now sourced from the imported JSON data.\n// This allows for easier management of product data in a separate file.\nexport const MOCK_PRODUCTS: Product[] = productsData as Product[];\n\n    "],"names":[],"mappings":";;;AAEA;;AAIO,MAAM,gBAA2B,sGAAA,CAAA,UAAY","debugId":null}},
    {"offset": {"line": 1322, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/layout/footer.tsx"],"sourcesContent":["\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Instagram, Heart } from 'lucide-react';\nimport { useMemo } from 'react';\nimport { MOCK_PRODUCTS } from '@/lib/mock-data';\nimport type { Product } from '@/lib/types';\n\n// Simple inline SVG for WhatsApp icon\nconst WhatsAppIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className=\"h-5 w-5 group-hover:scale-110 transition-transform duration-300\"\n  >\n    <path d=\"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\" />\n  </svg>\n);\n\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  const productCategories = useMemo(() => {\n    if (!MOCK_PRODUCTS || MOCK_PRODUCTS.length === 0) {\n      return [];\n    }\n    const uniqueCategories = new Set(\n      MOCK_PRODUCTS.map(p => p.category).filter(Boolean) as string[]\n    );\n    return Array.from(uniqueCategories).sort();\n  }, []);\n\n  return (\n    <footer className=\"py-12 md:py-16 px-4 md:px-8 border-t border-border/50 mt-auto bg-secondary/30 text-foreground\">\n      <div className=\"container mx-auto\">\n        {/* Aarambh Decor Introduction */}\n        <div className=\"mb-10 text-center\">\n          <h3 className=\"font-headline text-xl text-primary mb-4\">Aarambh Decor</h3>\n          <p className=\"text-sm text-muted-foreground leading-relaxed\">\n            Celebrating tradition, creativity, and individuality through thoughtfully curated home decor.\n          </p>\n        </div>\n\n        {/* Links and Logo Section */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-x-6 gap-y-10 md:gap-x-8 items-start mb-12\">\n          {/* Column 1: Quick Links */}\n          <div className=\"flex flex-col items-center\">\n            <h3 className=\"font-semibold text-lg mb-4 text-foreground text-center\">Quick Links</h3>\n            <ul className=\"space-y-2.5 text-center md:text-left\">\n              <li><Link href=\"/about\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">About Us</Link></li>\n              <li><Link href=\"/contact\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">Contact Us</Link></li>\n              <li><Link href=\"/faq\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">FAQs</Link></li>\n              <li><Link href=\"/shipping-returns\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">Shipping & Returns</Link></li>\n              <li><Link href=\"/privacy-policy\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">Privacy Policy</Link></li>\n              <li><Link href=\"/terms-conditions\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">Terms & Conditions</Link></li>\n            </ul>\n          </div>\n\n          {/* Column 2: Collections */}\n          <div className=\"flex flex-col items-center\">\n            <h3 className=\"font-semibold text-lg mb-4 text-foreground text-center\">Collections</h3>\n            <ul className=\"space-y-2.5 text-center md:text-left\">\n              {productCategories.length > 0 ? (\n                productCategories.map(category => (\n                  <li key={category}>\n                    <Link\n                      href={`/collections?category=${encodeURIComponent(category)}`}\n                      className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n                    >\n                      {category}\n                    </Link>\n                  </li>\n                ))\n              ) : (\n                <li>\n                  <p className=\"text-sm text-muted-foreground\">No specific categories found.</p>\n                </li>\n              )}\n              <li><Link href=\"/collections\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">View All</Link></li>\n            </ul>\n          </div>\n\n          {/* Column 3: Connect With Us */}\n          <div className=\"col-span-2 md:col-span-1 flex flex-col items-center\">\n            <h3 className=\"font-semibold text-lg mb-4 text-foreground text-center\">Connect With Us</h3>\n            <div className=\"flex flex-col space-y-3 items-center md:items-start\">\n              <a\n                href=\"https://chat.whatsapp.com/F7s9qoIos56HiZBbN1H2O3\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                aria-label=\"Join our WhatsApp Community\"\n                className=\"flex items-center space-x-2 text-sm text-muted-foreground hover:text-primary transition-all duration-300 group\"\n              >\n                <WhatsAppIcon />\n                <span>Join our WhatsApp Community</span>\n              </a>\n              <a\n                href=\"https://www.instagram.com/_aarambh_decor/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                aria-label=\"Join us on Instagram\"\n                className=\"flex items-center space-x-2 text-sm text-muted-foreground hover:text-primary transition-all duration-300 group\"\n              >\n                <Instagram className=\"h-5 w-5 group-hover:scale-110 transition-transform duration-300\" />\n                <span>Join us on Instagram</span>\n              </a>\n            </div>\n          </div>\n\n          {/* Column 4: Footer Logo */}\n          <div className=\"col-span-2 md:col-span-1 flex justify-center items-start\">\n            <Link href=\"/\" aria-label=\"Aarambh Decor Home\" className=\"block w-full max-w-[120px] sm:max-w-[150px] md:max-w-full\">\n                <Image\n                src=\"https://instagram.fdel11-3.fna.fbcdn.net/v/t51.2885-19/505746725_17843352006510460_4000077421691590872_n.jpg?_nc_ht=instagram.fdel11-3.fna.fbcdn.net&_nc_cat=104&_nc_oc=Q6cZ2QGrole3olHTzDhyipLFazMcqxTH3BTY1mp1iUgGHh4vS9EKAKzwAqkfF7dIo9auedjAk-OgM_5e06tRXQpcQ518&_nc_ohc=PWAubMoouIAQ7kNvwGXkA7l&_nc_gid=FmC7UlvNMxPMW8Vr6tpdOA&edm=AP4sbd4BAAAA&ccb=7-5&oh=00_AfPdwAvgOVVQOsnHh8uHrqXaxpnddaWxkGxDWyAHrd0Uzw&oe=685472D7&_nc_sid=7a9f4b\"\n                alt=\"Aarambh Decor Logo\"\n                width={200} \n                height={200} \n                layout=\"responsive\"\n                className=\"object-contain rounded-lg transition-opacity hover:opacity-80\"\n                data-ai-hint=\"logo\"\n                />\n            </Link>\n          </div>\n        </div>\n        \n        {/* Copyright Section */}\n        <div className=\"border-t border-border/30 pt-8 text-center\">\n          <p className=\"text-sm text-muted-foreground\">&copy; {currentYear} Aarambh Decor. All rights reserved.</p>\n          <p className=\"text-xs text-muted-foreground mt-2 flex items-center justify-center\">\n            Designed with <Heart className=\"h-3.5 w-3.5 mx-1 text-primary fill-primary\" aria-hidden=\"true\" /> by a lover of tradition.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;AAGA,sCAAsC;AACtC,MAAM,eAAe,kBACnB,8OAAC;QACC,OAAM;QACN,OAAM;QACN,QAAO;QACP,SAAQ;QACR,MAAK;QACL,QAAO;QACP,aAAY;QACZ,eAAc;QACd,gBAAe;QACf,WAAU;kBAEV,cAAA,8OAAC;YAAK,GAAE;;;;;;;;;;;AAKG,SAAS;IACtB,MAAM,cAAc,IAAI,OAAO,WAAW;IAE1C,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QAChC,IAAI,CAAC,0HAAA,CAAA,gBAAa,IAAI,0HAAA,CAAA,gBAAa,CAAC,MAAM,KAAK,GAAG;YAChD,OAAO,EAAE;QACX;QACA,MAAM,mBAAmB,IAAI,IAC3B,0HAAA,CAAA,gBAAa,CAAC,GAAG,CAAC,CAAA,IAAK,EAAE,QAAQ,EAAE,MAAM,CAAC;QAE5C,OAAO,MAAM,IAAI,CAAC,kBAAkB,IAAI;IAC1C,GAAG,EAAE;IAEL,qBACE,8OAAC;QAAO,WAAU;kBAChB,cAAA,8OAAC;YAAI,WAAU;;8BAEb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAA0C;;;;;;sCACxD,8OAAC;4BAAE,WAAU;sCAAgD;;;;;;;;;;;;8BAM/D,8OAAC;oBAAI,WAAU;;sCAEb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAG,WAAU;8CAAyD;;;;;;8CACvE,8OAAC;oCAAG,WAAU;;sDACZ,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAS,WAAU;0DAAqE;;;;;;;;;;;sDACvG,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAW,WAAU;0DAAqE;;;;;;;;;;;sDACzG,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAO,WAAU;0DAAqE;;;;;;;;;;;sDACrG,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAoB,WAAU;0DAAqE;;;;;;;;;;;sDAClH,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAkB,WAAU;0DAAqE;;;;;;;;;;;sDAChH,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAoB,WAAU;0DAAqE;;;;;;;;;;;;;;;;;;;;;;;sCAKtH,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAG,WAAU;8CAAyD;;;;;;8CACvE,8OAAC;oCAAG,WAAU;;wCACX,kBAAkB,MAAM,GAAG,IAC1B,kBAAkB,GAAG,CAAC,CAAA,yBACpB,8OAAC;0DACC,cAAA,8OAAC,4JAAA,CAAA,UAAI;oDACH,MAAM,CAAC,sBAAsB,EAAE,mBAAmB,WAAW;oDAC7D,WAAU;8DAET;;;;;;+CALI;;;;sEAUX,8OAAC;sDACC,cAAA,8OAAC;gDAAE,WAAU;0DAAgC;;;;;;;;;;;sDAGjD,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAe,WAAU;0DAAqE;;;;;;;;;;;;;;;;;;;;;;;sCAKjH,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAG,WAAU;8CAAyD;;;;;;8CACvE,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CACC,MAAK;4CACL,QAAO;4CACP,KAAI;4CACJ,cAAW;4CACX,WAAU;;8DAEV,8OAAC;;;;;8DACD,8OAAC;8DAAK;;;;;;;;;;;;sDAER,8OAAC;4CACC,MAAK;4CACL,QAAO;4CACP,KAAI;4CACJ,cAAW;4CACX,WAAU;;8DAEV,8OAAC,4MAAA,CAAA,YAAS;oDAAC,WAAU;;;;;;8DACrB,8OAAC;8DAAK;;;;;;;;;;;;;;;;;;;;;;;;sCAMZ,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC,4JAAA,CAAA,UAAI;gCAAC,MAAK;gCAAI,cAAW;gCAAqB,WAAU;0CACrD,cAAA,8OAAC,6HAAA,CAAA,UAAK;oCACN,KAAI;oCACJ,KAAI;oCACJ,OAAO;oCACP,QAAQ;oCACR,QAAO;oCACP,WAAU;oCACV,gBAAa;;;;;;;;;;;;;;;;;;;;;;8BAOrB,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAE,WAAU;;gCAAgC;gCAAQ;gCAAY;;;;;;;sCACjE,8OAAC;4BAAE,WAAU;;gCAAsE;8CACnE,8OAAC,oMAAA,CAAA,QAAK;oCAAC,WAAU;oCAA6C,eAAY;;;;;;gCAAS;;;;;;;;;;;;;;;;;;;;;;;;AAM7G","debugId":null}},
    {"offset": {"line": 1760, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1789, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1821, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1902, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/schemas.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\nexport const SignUpSchema = z.object({\n  firstName: z.string().min(1, { message: 'First name is required.' }).max(50, { message: 'First name is too long.' }),\n  lastName: z.string().min(1, { message: 'Last name is required.' }).max(50, { message: 'Last name is too long.' }),\n  email: z.string().email({ message: 'Invalid email address.' }),\n  password: z.string().min(6, { message: 'Password must be at least 6 characters long.' }),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match.\",\n  path: ['confirmPassword'],\n});\n\nexport type SignUpInput = z.infer<typeof SignUpSchema>;\n\nexport const SignInSchema = z.object({\n  email: z.string().email({ message: 'Invalid email address.' }),\n  password: z.string().min(1, { message: 'Password is required.' }),\n});\n\nexport type SignInInput = z.infer<typeof SignInSchema>;\n\nexport const UserProfileSchema = z.object({\n  firstName: z.string().min(1, { message: 'First name cannot be empty.' }).max(50, { message: 'First name is too long.' }).optional().or(z.literal('')),\n  lastName: z.string().min(1, { message: 'Last name cannot be empty.' }).max(50, { message: 'Last name is too long.' }).optional().or(z.literal('')),\n  phoneNumber: z.string().max(20, { message: 'Phone number must be 20 characters or less.' })\n    .regex(/^$|^(\\+?[1-9]\\d{1,14})$/, { message: \"Invalid phone number format. Should be empty or like +1234567890\" }) // Allows empty or E.164 format\n    .optional().or(z.literal('')),\n});\n\nexport type UserProfileInput = z.infer<typeof UserProfileSchema>;\n\nexport const AddressSchema = z.object({\n  id: z.string().optional(), // For identifying address to update/delete\n  fullName: z.string().min(1, 'Full name is required.').max(100, 'Full name is too long.'),\n  addressLine1: z.string().min(1, 'Address line 1 is required.').max(200, 'Address line 1 is too long.'),\n  addressLine2: z.string().max(200, 'Address line 2 is too long.').optional().or(z.literal('')),\n  city: z.string().min(1, 'City is required.').max(100, 'City name is too long.'),\n  state: z.string().min(1, 'State/Province is required.').max(100, 'State/Province is too long.'),\n  postalCode: z.string().min(1, 'Postal code is required.').max(20, 'Postal code is too long.'),\n  country: z.string().min(1, 'Country is required.').max(100, 'Country name is too long.'),\n  phoneNumber: z.string().max(20, 'Phone number must be 20 characters or less.')\n    .regex(/^$|^(\\+?[1-9]\\d{1,14})$/, { message: \"Invalid phone number format. Should be empty or like +1234567890\" })\n    .optional().or(z.literal('')),\n});\n\nexport type AddressInput = z.infer<typeof AddressSchema>;\n\nconst ProductImageSchema = z.object({\n  url: z.string().url({ message: \"Invalid image URL.\" }),\n  dataAiHint: z.string().max(50, { message: \"AI hint too long.\" }).optional().or(z.literal('')),\n});\n\nexport const ProductFormSchema = z.object({\n  name: z.string().min(1, \"Product name is required.\").max(100, \"Product name is too long.\"),\n  description: z.string().min(1, \"Description is required.\").max(5000, \"Description is too long.\"),\n  careInstructions: z.string().max(1000, \"Care instructions too long.\").optional().or(z.literal('')),\n  price: z.string().min(1, \"Price is required.\").regex(/^\\s*Rs\\.\\s*\\d+(\\.\\d{1,2})?\\s*$/, { message: \"Price must be in format 'Rs. 123.45'\" }),\n  category: z.string().min(1, \"Category is required.\").max(50, \"Category name too long.\"),\n  isLatest: z.boolean().optional(),\n  sizeAndDimensions: z.string().max(100, \"Size/dimensions info too long.\").optional().or(z.literal('')),\n  material: z.string().max(100, \"Material info too long.\").optional().or(z.literal('')),\n  imageUrls: z.array(ProductImageSchema).min(1, \"At least one image is required.\"),\n});\n\nexport type ProductFormInput = z.infer<typeof ProductFormSchema>;\n"],"names":[],"mappings":";;;;;;;AACA;;AAEO,MAAM,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAA0B,GAAG,GAAG,CAAC,IAAI;QAAE,SAAS;IAA0B;IAClH,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAyB,GAAG,GAAG,CAAC,IAAI;QAAE,SAAS;IAAyB;IAC/G,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS;IAAyB;IAC5D,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAA+C;IACtF,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM;AAC3B,GAAG,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IAC1D,SAAS;IACT,MAAM;QAAC;KAAkB;AAC3B;AAIO,MAAM,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS;IAAyB;IAC5D,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAwB;AACjE;AAIO,MAAM,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAA8B,GAAG,GAAG,CAAC,IAAI;QAAE,SAAS;IAA0B,GAAG,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;IACjJ,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAA6B,GAAG,GAAG,CAAC,IAAI;QAAE,SAAS;IAAyB,GAAG,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;IAC9I,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;QAAE,SAAS;IAA8C,GACtF,KAAK,CAAC,2BAA2B;QAAE,SAAS;IAAmE,GAAG,+BAA+B;KACjJ,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;AAC7B;AAIO,MAAM,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,IAAI,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACvB,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,0BAA0B,GAAG,CAAC,KAAK;IAC/D,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,+BAA+B,GAAG,CAAC,KAAK;IACxE,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,+BAA+B,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;IACzF,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,qBAAqB,GAAG,CAAC,KAAK;IACtD,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,+BAA+B,GAAG,CAAC,KAAK;IACjE,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,4BAA4B,GAAG,CAAC,IAAI;IAClE,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,wBAAwB,GAAG,CAAC,KAAK;IAC5D,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,+CAC7B,KAAK,CAAC,2BAA2B;QAAE,SAAS;IAAmE,GAC/G,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;AAC7B;AAIA,MAAM,qBAAqB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,KAAK,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAAE,SAAS;IAAqB;IACpD,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;QAAE,SAAS;IAAoB,GAAG,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;AAC3F;AAEO,MAAM,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,6BAA6B,GAAG,CAAC,KAAK;IAC9D,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,4BAA4B,GAAG,CAAC,MAAM;IACrE,kBAAkB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,+BAA+B,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;IAC9F,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,sBAAsB,KAAK,CAAC,kCAAkC;QAAE,SAAS;IAAuC;IACzI,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,yBAAyB,GAAG,CAAC,IAAI;IAC7D,UAAU,oIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ;IAC9B,mBAAmB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,kCAAkC,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;IACjG,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,2BAA2B,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;IACjF,WAAW,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,oBAAoB,GAAG,CAAC,GAAG;AAChD","debugId":null}},
    {"offset": {"line": 2001, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAEA;AAEA;AACA;AASA;AACA;AAfA;;;;;;;AAiBA,MAAM,OAAO,8JAAA,CAAA,eAAY;AASzB,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,gBAAmB,AAAD,EACzC,CAAC;AAGH,MAAM,YAAY,CAGhB,EACA,GAAG,OACkC;IACrC,qBACE,8OAAC,iBAAiB,QAAQ;QAAC,OAAO;YAAE,MAAM,MAAM,IAAI;QAAC;kBACnD,cAAA,8OAAC,8JAAA,CAAA,aAAU;YAAE,GAAG,KAAK;;;;;;;;;;;AAG3B;AAEA,MAAM,eAAe;IACnB,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE;IACtC,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE;IACrC,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,iBAAc,AAAD;IAElD,MAAM,aAAa,cAAc,aAAa,IAAI,EAAE;IAEpD,IAAI,CAAC,cAAc;QACjB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,OAAO;QACL;QACA,MAAM,aAAa,IAAI;QACvB,YAAY,GAAG,GAAG,UAAU,CAAC;QAC7B,mBAAmB,GAAG,GAAG,sBAAsB,CAAC;QAChD,eAAe,GAAG,GAAG,kBAAkB,CAAC;QACxC,GAAG,UAAU;IACf;AACF;AAMA,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,gBAAmB,AAAD,EACxC,CAAC;AAGH,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,MAAM,KAAK,CAAA,GAAA,qMAAA,CAAA,QAAW,AAAD;IAErB,qBACE,8OAAC,gBAAgB,QAAQ;QAAC,OAAO;YAAE;QAAG;kBACpC,cAAA,8OAAC;YAAI,KAAK;YAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,aAAa;YAAa,GAAG,KAAK;;;;;;;;;;;AAGrE;AACA,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG;IAE9B,qBACE,8OAAC,iIAAA,CAAA,QAAK;QACJ,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,SAAS,oBAAoB;QAC3C,SAAS;QACR,GAAG,KAAK;;;;;;AAGf;AACA,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,GAAG,OAAO,EAAE;IACf,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,iBAAiB,EAAE,aAAa,EAAE,GAAG;IAEhE,qBACE,8OAAC,gKAAA,CAAA,OAAI;QACH,KAAK;QACL,IAAI;QACJ,oBACE,CAAC,QACG,GAAG,mBAAmB,GACtB,GAAG,kBAAkB,CAAC,EAAE,eAAe;QAE7C,gBAAc,CAAC,CAAC;QACf,GAAG,KAAK;;;;;;AAGf;AACA,YAAY,WAAW,GAAG;AAE1B,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,MAAM,EAAE,iBAAiB,EAAE,GAAG;IAE9B,qBACE,8OAAC;QACC,KAAK;QACL,IAAI;QACJ,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AACA,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE;IACpC,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG;IACjC,MAAM,OAAO,QAAQ,OAAO,OAAO,WAAW,MAAM;IAEpD,IAAI,CAAC,MAAM;QACT,OAAO;IACT;IAEA,qBACE,8OAAC;QACC,KAAK;QACL,IAAI;QACJ,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,wCAAwC;QACrD,GAAG,KAAK;kBAER;;;;;;AAGP;AACA,YAAY,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 2154, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2286, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/profile/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { User } from 'firebase/auth';\nimport { auth, db } from '@/lib/firebase';\nimport { UserProfileSchema, AddressSchema } from '@/lib/schemas';\nimport type { UserProfile, Address, Order } from '@/lib/types';\nimport { doc, getDoc, setDoc, updateDoc, collection, addDoc, getDocs, deleteDoc, query, orderBy } from 'firebase/firestore';\nimport { revalidatePath } from 'next/cache';\n\nexport interface FormState {\n  message: string | null;\n  errors?: Record<string, string[] | undefined> & { _form?: string[] };\n  success: boolean;\n  data?: any;\n}\n\n// --- User Profile Actions ---\n\nexport async function createUserProfileDocument(uid: string, email: string, firstName: string, lastName: string, phoneNumber?: string): Promise<void> {\n  const profileDocRef = doc(db, 'userProfiles', uid);\n  const newProfileData: UserProfile = { \n    uid: uid,\n    email: email,\n    firstName: firstName,\n    lastName: lastName,\n    phoneNumber: phoneNumber || null,\n  };\n  await setDoc(profileDocRef, newProfileData, { merge: true }); \n}\n\n\nexport async function getUserProfile(authenticatedUser?: User | null): Promise<UserProfile | null> {\n  const userToQuery = authenticatedUser || auth.currentUser; \n  if (!userToQuery) return null;\n\n  const profileDocRef = doc(db, 'userProfiles', userToQuery.uid);\n  const profileSnap = await getDoc(profileDocRef);\n\n  if (profileSnap.exists()) {\n    const data = profileSnap.data() as Partial<UserProfile>; \n    let firstName = data.firstName;\n    let lastName = data.lastName;\n    let phoneNumber = data.phoneNumber;\n\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      firstName = firstName || 'Ishanvi'; \n      lastName = lastName || 'Chauhan';\n      // phoneNumber will be whatever is in DB or null/undefined. No specific default phone for Ishanvi here.\n    }\n    \n    return { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: firstName || null, \n        lastName: lastName || null,\n        phoneNumber: phoneNumber || null,\n    } as UserProfile;\n  } else {\n    // New user, create profile document\n    let newFirstName = '';\n    let newLastName = '';\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      newFirstName = 'Ishanvi';\n      newLastName = 'Chauhan';\n    } else if (userToQuery.displayName) {\n        const nameParts = userToQuery.displayName.split(' ');\n        newFirstName = nameParts[0] || '';\n        newLastName = nameParts.slice(1).join(' ') || '';\n    }\n    \n    // For a brand new profile, phoneNumber will be null unless provided during signup (which it isn't currently)\n    const newProfileData: UserProfile = { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: newFirstName || null, \n        lastName: newLastName || null,\n        phoneNumber: null, // Default to null for new profiles\n    };\n    await setDoc(profileDocRef, newProfileData);\n    return newProfileData;\n  }\n}\n\nexport async function updateUserProfile(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = UserProfileSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const profileDocRef = doc(db, 'userProfiles', user.uid);\n    const dataToUpdate: Partial<Pick<UserProfile, 'firstName' | 'lastName' | 'phoneNumber'>> = {};\n\n    let firstNameToSet = validation.data.firstName;\n    let lastNameToSet = validation.data.lastName;\n    // PhoneNumber can be an empty string (to clear it) or a valid number\n    const phoneNumberToSet = validation.data.phoneNumber;\n\n\n    if (user.email === 'ishanvi.chauhan@gmail.com') {\n      firstNameToSet = firstNameToSet === '' ? 'Ishanvi' : (firstNameToSet || 'Ishanvi'); \n      lastNameToSet = lastNameToSet === '' ? 'Chauhan' : (lastNameToSet || 'Chauhan');   \n    }\n    \n    if (firstNameToSet !== undefined) dataToUpdate.firstName = firstNameToSet;\n    if (lastNameToSet !== undefined) dataToUpdate.lastName = lastNameToSet;\n    if (phoneNumberToSet !== undefined) dataToUpdate.phoneNumber = phoneNumberToSet === '' ? null : phoneNumberToSet;\n\n\n    const profileSnap = await getDoc(profileDocRef);\n    if (profileSnap.exists()) {\n        await updateDoc(profileDocRef, dataToUpdate);\n    } else {\n        await setDoc(profileDocRef, { \n            email: user.email || '', \n            ...dataToUpdate \n        });\n    }\n\n    revalidatePath('/profile');\n    return { message: 'Profile updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    return { message: 'Failed to update profile.', success: false, errors: { _form: ['Failed to update profile.'] } };\n  }\n}\n\n\n// --- Shipping Address Actions ---\nexport async function getShippingAddresses(): Promise<Address[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n\n  const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n  const addressesSnap = await getDocs(addressesColRef);\n  \n  return addressesSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Address));\n}\n\nexport async function addShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...addressDataFromSchema } = validation.data; \n    \n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await addDoc(addressesColRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address added successfully!', success: true };\n  } catch (error) {\n    console.error('Error adding address:', error);\n    return { message: 'Failed to add shipping address.', success: false, errors: { _form: ['Failed to add shipping address.'] } };\n  }\n}\n\nexport async function updateShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n  \n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  const { id: addressId, ...addressDataFromSchema } = validation.data;\n\n  if (!addressId) {\n    return { message: 'Address ID is missing for update.', success: false, errors: { _form: ['Address ID is missing.'] } };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n\n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await updateDoc(addressDocRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating address:', error);\n    return { message: 'Failed to update shipping address.', success: false, errors: { _form: ['Failed to update shipping address.'] } };\n  }\n}\n\nexport async function deleteShippingAddress(addressId: string): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false };\n  }\n  if (!addressId) {\n     return { message: 'Address ID is missing for deletion.', success: false };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n    await deleteDoc(addressDocRef);\n    revalidatePath('/profile');\n    return { message: 'Shipping address deleted successfully!', success: true };\n  } catch (error) {\n    console.error('Error deleting address:', error);\n    return { message: 'Failed to delete shipping address.', success: false };\n  }\n}\n\n// --- Order History Actions ---\nexport async function getOrderHistory(): Promise<Order[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n  \n  // This is a placeholder. In a real application, you would query a 'orders' collection\n  // filtered by userId and ordered by date.\n  // For example:\n  // const ordersColRef = collection(db, 'orders');\n  // const q = query(ordersColRef, where('userId', '==', user.uid), orderBy('orderDate', 'desc'));\n  // const ordersSnap = await getDocs(q);\n  // return ordersSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Order));\n\n  console.warn(\"getOrderHistory is a placeholder and does not fetch real order data yet.\");\n  \n  // Mock some order data for UI demonstration purposes\n  const mockOrders: Order[] = [\n    // {\n    //   id: 'mockOrder123',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n    //   items: [\n    //     { productId: 'p1', productName: 'Floral Wall Art Set', quantity: 1, price: 'Rs. 1850' },\n    //     { productId: 'p2', productName: 'Gold Sunburst Wall Décor Set', quantity: 2, price: 'Rs. 1299' },\n    //   ],\n    //   totalAmount: 1850 + (1299 * 2),\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Delivered',\n    // },\n    // {\n    //   id: 'mockOrder456',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\n    //   items: [\n    //     { productId: 'p5', productName: 'Rectangular Wall Mirror', quantity: 1, price: 'Rs. 2250' },\n    //   ],\n    //   totalAmount: 2250,\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Shipped',\n    // },\n  ];\n  // return Promise.resolve(mockOrders); // Uncomment to show mock data\n  return Promise.resolve([]); // Default to no orders\n}\n\n"],"names":[],"mappings":";;;;;;IAgCsB,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2299, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/profile/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { User } from 'firebase/auth';\nimport { auth, db } from '@/lib/firebase';\nimport { UserProfileSchema, AddressSchema } from '@/lib/schemas';\nimport type { UserProfile, Address, Order } from '@/lib/types';\nimport { doc, getDoc, setDoc, updateDoc, collection, addDoc, getDocs, deleteDoc, query, orderBy } from 'firebase/firestore';\nimport { revalidatePath } from 'next/cache';\n\nexport interface FormState {\n  message: string | null;\n  errors?: Record<string, string[] | undefined> & { _form?: string[] };\n  success: boolean;\n  data?: any;\n}\n\n// --- User Profile Actions ---\n\nexport async function createUserProfileDocument(uid: string, email: string, firstName: string, lastName: string, phoneNumber?: string): Promise<void> {\n  const profileDocRef = doc(db, 'userProfiles', uid);\n  const newProfileData: UserProfile = { \n    uid: uid,\n    email: email,\n    firstName: firstName,\n    lastName: lastName,\n    phoneNumber: phoneNumber || null,\n  };\n  await setDoc(profileDocRef, newProfileData, { merge: true }); \n}\n\n\nexport async function getUserProfile(authenticatedUser?: User | null): Promise<UserProfile | null> {\n  const userToQuery = authenticatedUser || auth.currentUser; \n  if (!userToQuery) return null;\n\n  const profileDocRef = doc(db, 'userProfiles', userToQuery.uid);\n  const profileSnap = await getDoc(profileDocRef);\n\n  if (profileSnap.exists()) {\n    const data = profileSnap.data() as Partial<UserProfile>; \n    let firstName = data.firstName;\n    let lastName = data.lastName;\n    let phoneNumber = data.phoneNumber;\n\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      firstName = firstName || 'Ishanvi'; \n      lastName = lastName || 'Chauhan';\n      // phoneNumber will be whatever is in DB or null/undefined. No specific default phone for Ishanvi here.\n    }\n    \n    return { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: firstName || null, \n        lastName: lastName || null,\n        phoneNumber: phoneNumber || null,\n    } as UserProfile;\n  } else {\n    // New user, create profile document\n    let newFirstName = '';\n    let newLastName = '';\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      newFirstName = 'Ishanvi';\n      newLastName = 'Chauhan';\n    } else if (userToQuery.displayName) {\n        const nameParts = userToQuery.displayName.split(' ');\n        newFirstName = nameParts[0] || '';\n        newLastName = nameParts.slice(1).join(' ') || '';\n    }\n    \n    // For a brand new profile, phoneNumber will be null unless provided during signup (which it isn't currently)\n    const newProfileData: UserProfile = { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: newFirstName || null, \n        lastName: newLastName || null,\n        phoneNumber: null, // Default to null for new profiles\n    };\n    await setDoc(profileDocRef, newProfileData);\n    return newProfileData;\n  }\n}\n\nexport async function updateUserProfile(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = UserProfileSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const profileDocRef = doc(db, 'userProfiles', user.uid);\n    const dataToUpdate: Partial<Pick<UserProfile, 'firstName' | 'lastName' | 'phoneNumber'>> = {};\n\n    let firstNameToSet = validation.data.firstName;\n    let lastNameToSet = validation.data.lastName;\n    // PhoneNumber can be an empty string (to clear it) or a valid number\n    const phoneNumberToSet = validation.data.phoneNumber;\n\n\n    if (user.email === 'ishanvi.chauhan@gmail.com') {\n      firstNameToSet = firstNameToSet === '' ? 'Ishanvi' : (firstNameToSet || 'Ishanvi'); \n      lastNameToSet = lastNameToSet === '' ? 'Chauhan' : (lastNameToSet || 'Chauhan');   \n    }\n    \n    if (firstNameToSet !== undefined) dataToUpdate.firstName = firstNameToSet;\n    if (lastNameToSet !== undefined) dataToUpdate.lastName = lastNameToSet;\n    if (phoneNumberToSet !== undefined) dataToUpdate.phoneNumber = phoneNumberToSet === '' ? null : phoneNumberToSet;\n\n\n    const profileSnap = await getDoc(profileDocRef);\n    if (profileSnap.exists()) {\n        await updateDoc(profileDocRef, dataToUpdate);\n    } else {\n        await setDoc(profileDocRef, { \n            email: user.email || '', \n            ...dataToUpdate \n        });\n    }\n\n    revalidatePath('/profile');\n    return { message: 'Profile updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    return { message: 'Failed to update profile.', success: false, errors: { _form: ['Failed to update profile.'] } };\n  }\n}\n\n\n// --- Shipping Address Actions ---\nexport async function getShippingAddresses(): Promise<Address[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n\n  const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n  const addressesSnap = await getDocs(addressesColRef);\n  \n  return addressesSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Address));\n}\n\nexport async function addShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...addressDataFromSchema } = validation.data; \n    \n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await addDoc(addressesColRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address added successfully!', success: true };\n  } catch (error) {\n    console.error('Error adding address:', error);\n    return { message: 'Failed to add shipping address.', success: false, errors: { _form: ['Failed to add shipping address.'] } };\n  }\n}\n\nexport async function updateShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n  \n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  const { id: addressId, ...addressDataFromSchema } = validation.data;\n\n  if (!addressId) {\n    return { message: 'Address ID is missing for update.', success: false, errors: { _form: ['Address ID is missing.'] } };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n\n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await updateDoc(addressDocRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating address:', error);\n    return { message: 'Failed to update shipping address.', success: false, errors: { _form: ['Failed to update shipping address.'] } };\n  }\n}\n\nexport async function deleteShippingAddress(addressId: string): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false };\n  }\n  if (!addressId) {\n     return { message: 'Address ID is missing for deletion.', success: false };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n    await deleteDoc(addressDocRef);\n    revalidatePath('/profile');\n    return { message: 'Shipping address deleted successfully!', success: true };\n  } catch (error) {\n    console.error('Error deleting address:', error);\n    return { message: 'Failed to delete shipping address.', success: false };\n  }\n}\n\n// --- Order History Actions ---\nexport async function getOrderHistory(): Promise<Order[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n  \n  // This is a placeholder. In a real application, you would query a 'orders' collection\n  // filtered by userId and ordered by date.\n  // For example:\n  // const ordersColRef = collection(db, 'orders');\n  // const q = query(ordersColRef, where('userId', '==', user.uid), orderBy('orderDate', 'desc'));\n  // const ordersSnap = await getDocs(q);\n  // return ordersSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Order));\n\n  console.warn(\"getOrderHistory is a placeholder and does not fetch real order data yet.\");\n  \n  // Mock some order data for UI demonstration purposes\n  const mockOrders: Order[] = [\n    // {\n    //   id: 'mockOrder123',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n    //   items: [\n    //     { productId: 'p1', productName: 'Floral Wall Art Set', quantity: 1, price: 'Rs. 1850' },\n    //     { productId: 'p2', productName: 'Gold Sunburst Wall Décor Set', quantity: 2, price: 'Rs. 1299' },\n    //   ],\n    //   totalAmount: 1850 + (1299 * 2),\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Delivered',\n    // },\n    // {\n    //   id: 'mockOrder456',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\n    //   items: [\n    //     { productId: 'p5', productName: 'Rectangular Wall Mirror', quantity: 1, price: 'Rs. 2250' },\n    //   ],\n    //   totalAmount: 2250,\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Shipped',\n    // },\n  ];\n  // return Promise.resolve(mockOrders); // Uncomment to show mock data\n  return Promise.resolve([]); // Default to no orders\n}\n\n"],"names":[],"mappings":";;;;;;IAoFsB,oBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2312, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/profile/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { User } from 'firebase/auth';\nimport { auth, db } from '@/lib/firebase';\nimport { UserProfileSchema, AddressSchema } from '@/lib/schemas';\nimport type { UserProfile, Address, Order } from '@/lib/types';\nimport { doc, getDoc, setDoc, updateDoc, collection, addDoc, getDocs, deleteDoc, query, orderBy } from 'firebase/firestore';\nimport { revalidatePath } from 'next/cache';\n\nexport interface FormState {\n  message: string | null;\n  errors?: Record<string, string[] | undefined> & { _form?: string[] };\n  success: boolean;\n  data?: any;\n}\n\n// --- User Profile Actions ---\n\nexport async function createUserProfileDocument(uid: string, email: string, firstName: string, lastName: string, phoneNumber?: string): Promise<void> {\n  const profileDocRef = doc(db, 'userProfiles', uid);\n  const newProfileData: UserProfile = { \n    uid: uid,\n    email: email,\n    firstName: firstName,\n    lastName: lastName,\n    phoneNumber: phoneNumber || null,\n  };\n  await setDoc(profileDocRef, newProfileData, { merge: true }); \n}\n\n\nexport async function getUserProfile(authenticatedUser?: User | null): Promise<UserProfile | null> {\n  const userToQuery = authenticatedUser || auth.currentUser; \n  if (!userToQuery) return null;\n\n  const profileDocRef = doc(db, 'userProfiles', userToQuery.uid);\n  const profileSnap = await getDoc(profileDocRef);\n\n  if (profileSnap.exists()) {\n    const data = profileSnap.data() as Partial<UserProfile>; \n    let firstName = data.firstName;\n    let lastName = data.lastName;\n    let phoneNumber = data.phoneNumber;\n\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      firstName = firstName || 'Ishanvi'; \n      lastName = lastName || 'Chauhan';\n      // phoneNumber will be whatever is in DB or null/undefined. No specific default phone for Ishanvi here.\n    }\n    \n    return { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: firstName || null, \n        lastName: lastName || null,\n        phoneNumber: phoneNumber || null,\n    } as UserProfile;\n  } else {\n    // New user, create profile document\n    let newFirstName = '';\n    let newLastName = '';\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      newFirstName = 'Ishanvi';\n      newLastName = 'Chauhan';\n    } else if (userToQuery.displayName) {\n        const nameParts = userToQuery.displayName.split(' ');\n        newFirstName = nameParts[0] || '';\n        newLastName = nameParts.slice(1).join(' ') || '';\n    }\n    \n    // For a brand new profile, phoneNumber will be null unless provided during signup (which it isn't currently)\n    const newProfileData: UserProfile = { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: newFirstName || null, \n        lastName: newLastName || null,\n        phoneNumber: null, // Default to null for new profiles\n    };\n    await setDoc(profileDocRef, newProfileData);\n    return newProfileData;\n  }\n}\n\nexport async function updateUserProfile(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = UserProfileSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const profileDocRef = doc(db, 'userProfiles', user.uid);\n    const dataToUpdate: Partial<Pick<UserProfile, 'firstName' | 'lastName' | 'phoneNumber'>> = {};\n\n    let firstNameToSet = validation.data.firstName;\n    let lastNameToSet = validation.data.lastName;\n    // PhoneNumber can be an empty string (to clear it) or a valid number\n    const phoneNumberToSet = validation.data.phoneNumber;\n\n\n    if (user.email === 'ishanvi.chauhan@gmail.com') {\n      firstNameToSet = firstNameToSet === '' ? 'Ishanvi' : (firstNameToSet || 'Ishanvi'); \n      lastNameToSet = lastNameToSet === '' ? 'Chauhan' : (lastNameToSet || 'Chauhan');   \n    }\n    \n    if (firstNameToSet !== undefined) dataToUpdate.firstName = firstNameToSet;\n    if (lastNameToSet !== undefined) dataToUpdate.lastName = lastNameToSet;\n    if (phoneNumberToSet !== undefined) dataToUpdate.phoneNumber = phoneNumberToSet === '' ? null : phoneNumberToSet;\n\n\n    const profileSnap = await getDoc(profileDocRef);\n    if (profileSnap.exists()) {\n        await updateDoc(profileDocRef, dataToUpdate);\n    } else {\n        await setDoc(profileDocRef, { \n            email: user.email || '', \n            ...dataToUpdate \n        });\n    }\n\n    revalidatePath('/profile');\n    return { message: 'Profile updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    return { message: 'Failed to update profile.', success: false, errors: { _form: ['Failed to update profile.'] } };\n  }\n}\n\n\n// --- Shipping Address Actions ---\nexport async function getShippingAddresses(): Promise<Address[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n\n  const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n  const addressesSnap = await getDocs(addressesColRef);\n  \n  return addressesSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Address));\n}\n\nexport async function addShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...addressDataFromSchema } = validation.data; \n    \n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await addDoc(addressesColRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address added successfully!', success: true };\n  } catch (error) {\n    console.error('Error adding address:', error);\n    return { message: 'Failed to add shipping address.', success: false, errors: { _form: ['Failed to add shipping address.'] } };\n  }\n}\n\nexport async function updateShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n  \n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  const { id: addressId, ...addressDataFromSchema } = validation.data;\n\n  if (!addressId) {\n    return { message: 'Address ID is missing for update.', success: false, errors: { _form: ['Address ID is missing.'] } };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n\n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await updateDoc(addressDocRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating address:', error);\n    return { message: 'Failed to update shipping address.', success: false, errors: { _form: ['Failed to update shipping address.'] } };\n  }\n}\n\nexport async function deleteShippingAddress(addressId: string): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false };\n  }\n  if (!addressId) {\n     return { message: 'Address ID is missing for deletion.', success: false };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n    await deleteDoc(addressDocRef);\n    revalidatePath('/profile');\n    return { message: 'Shipping address deleted successfully!', success: true };\n  } catch (error) {\n    console.error('Error deleting address:', error);\n    return { message: 'Failed to delete shipping address.', success: false };\n  }\n}\n\n// --- Order History Actions ---\nexport async function getOrderHistory(): Promise<Order[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n  \n  // This is a placeholder. In a real application, you would query a 'orders' collection\n  // filtered by userId and ordered by date.\n  // For example:\n  // const ordersColRef = collection(db, 'orders');\n  // const q = query(ordersColRef, where('userId', '==', user.uid), orderBy('orderDate', 'desc'));\n  // const ordersSnap = await getDocs(q);\n  // return ordersSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Order));\n\n  console.warn(\"getOrderHistory is a placeholder and does not fetch real order data yet.\");\n  \n  // Mock some order data for UI demonstration purposes\n  const mockOrders: Order[] = [\n    // {\n    //   id: 'mockOrder123',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n    //   items: [\n    //     { productId: 'p1', productName: 'Floral Wall Art Set', quantity: 1, price: 'Rs. 1850' },\n    //     { productId: 'p2', productName: 'Gold Sunburst Wall Décor Set', quantity: 2, price: 'Rs. 1299' },\n    //   ],\n    //   totalAmount: 1850 + (1299 * 2),\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Delivered',\n    // },\n    // {\n    //   id: 'mockOrder456',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\n    //   items: [\n    //     { productId: 'p5', productName: 'Rectangular Wall Mirror', quantity: 1, price: 'Rs. 2250' },\n    //   ],\n    //   totalAmount: 2250,\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Shipped',\n    // },\n  ];\n  // return Promise.resolve(mockOrders); // Uncomment to show mock data\n  return Promise.resolve([]); // Default to no orders\n}\n\n"],"names":[],"mappings":";;;;;;IA6IsB,uBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2325, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/profile/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { User } from 'firebase/auth';\nimport { auth, db } from '@/lib/firebase';\nimport { UserProfileSchema, AddressSchema } from '@/lib/schemas';\nimport type { UserProfile, Address, Order } from '@/lib/types';\nimport { doc, getDoc, setDoc, updateDoc, collection, addDoc, getDocs, deleteDoc, query, orderBy } from 'firebase/firestore';\nimport { revalidatePath } from 'next/cache';\n\nexport interface FormState {\n  message: string | null;\n  errors?: Record<string, string[] | undefined> & { _form?: string[] };\n  success: boolean;\n  data?: any;\n}\n\n// --- User Profile Actions ---\n\nexport async function createUserProfileDocument(uid: string, email: string, firstName: string, lastName: string, phoneNumber?: string): Promise<void> {\n  const profileDocRef = doc(db, 'userProfiles', uid);\n  const newProfileData: UserProfile = { \n    uid: uid,\n    email: email,\n    firstName: firstName,\n    lastName: lastName,\n    phoneNumber: phoneNumber || null,\n  };\n  await setDoc(profileDocRef, newProfileData, { merge: true }); \n}\n\n\nexport async function getUserProfile(authenticatedUser?: User | null): Promise<UserProfile | null> {\n  const userToQuery = authenticatedUser || auth.currentUser; \n  if (!userToQuery) return null;\n\n  const profileDocRef = doc(db, 'userProfiles', userToQuery.uid);\n  const profileSnap = await getDoc(profileDocRef);\n\n  if (profileSnap.exists()) {\n    const data = profileSnap.data() as Partial<UserProfile>; \n    let firstName = data.firstName;\n    let lastName = data.lastName;\n    let phoneNumber = data.phoneNumber;\n\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      firstName = firstName || 'Ishanvi'; \n      lastName = lastName || 'Chauhan';\n      // phoneNumber will be whatever is in DB or null/undefined. No specific default phone for Ishanvi here.\n    }\n    \n    return { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: firstName || null, \n        lastName: lastName || null,\n        phoneNumber: phoneNumber || null,\n    } as UserProfile;\n  } else {\n    // New user, create profile document\n    let newFirstName = '';\n    let newLastName = '';\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      newFirstName = 'Ishanvi';\n      newLastName = 'Chauhan';\n    } else if (userToQuery.displayName) {\n        const nameParts = userToQuery.displayName.split(' ');\n        newFirstName = nameParts[0] || '';\n        newLastName = nameParts.slice(1).join(' ') || '';\n    }\n    \n    // For a brand new profile, phoneNumber will be null unless provided during signup (which it isn't currently)\n    const newProfileData: UserProfile = { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: newFirstName || null, \n        lastName: newLastName || null,\n        phoneNumber: null, // Default to null for new profiles\n    };\n    await setDoc(profileDocRef, newProfileData);\n    return newProfileData;\n  }\n}\n\nexport async function updateUserProfile(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = UserProfileSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const profileDocRef = doc(db, 'userProfiles', user.uid);\n    const dataToUpdate: Partial<Pick<UserProfile, 'firstName' | 'lastName' | 'phoneNumber'>> = {};\n\n    let firstNameToSet = validation.data.firstName;\n    let lastNameToSet = validation.data.lastName;\n    // PhoneNumber can be an empty string (to clear it) or a valid number\n    const phoneNumberToSet = validation.data.phoneNumber;\n\n\n    if (user.email === 'ishanvi.chauhan@gmail.com') {\n      firstNameToSet = firstNameToSet === '' ? 'Ishanvi' : (firstNameToSet || 'Ishanvi'); \n      lastNameToSet = lastNameToSet === '' ? 'Chauhan' : (lastNameToSet || 'Chauhan');   \n    }\n    \n    if (firstNameToSet !== undefined) dataToUpdate.firstName = firstNameToSet;\n    if (lastNameToSet !== undefined) dataToUpdate.lastName = lastNameToSet;\n    if (phoneNumberToSet !== undefined) dataToUpdate.phoneNumber = phoneNumberToSet === '' ? null : phoneNumberToSet;\n\n\n    const profileSnap = await getDoc(profileDocRef);\n    if (profileSnap.exists()) {\n        await updateDoc(profileDocRef, dataToUpdate);\n    } else {\n        await setDoc(profileDocRef, { \n            email: user.email || '', \n            ...dataToUpdate \n        });\n    }\n\n    revalidatePath('/profile');\n    return { message: 'Profile updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    return { message: 'Failed to update profile.', success: false, errors: { _form: ['Failed to update profile.'] } };\n  }\n}\n\n\n// --- Shipping Address Actions ---\nexport async function getShippingAddresses(): Promise<Address[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n\n  const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n  const addressesSnap = await getDocs(addressesColRef);\n  \n  return addressesSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Address));\n}\n\nexport async function addShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...addressDataFromSchema } = validation.data; \n    \n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await addDoc(addressesColRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address added successfully!', success: true };\n  } catch (error) {\n    console.error('Error adding address:', error);\n    return { message: 'Failed to add shipping address.', success: false, errors: { _form: ['Failed to add shipping address.'] } };\n  }\n}\n\nexport async function updateShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n  \n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  const { id: addressId, ...addressDataFromSchema } = validation.data;\n\n  if (!addressId) {\n    return { message: 'Address ID is missing for update.', success: false, errors: { _form: ['Address ID is missing.'] } };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n\n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await updateDoc(addressDocRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating address:', error);\n    return { message: 'Failed to update shipping address.', success: false, errors: { _form: ['Failed to update shipping address.'] } };\n  }\n}\n\nexport async function deleteShippingAddress(addressId: string): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false };\n  }\n  if (!addressId) {\n     return { message: 'Address ID is missing for deletion.', success: false };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n    await deleteDoc(addressDocRef);\n    revalidatePath('/profile');\n    return { message: 'Shipping address deleted successfully!', success: true };\n  } catch (error) {\n    console.error('Error deleting address:', error);\n    return { message: 'Failed to delete shipping address.', success: false };\n  }\n}\n\n// --- Order History Actions ---\nexport async function getOrderHistory(): Promise<Order[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n  \n  // This is a placeholder. In a real application, you would query a 'orders' collection\n  // filtered by userId and ordered by date.\n  // For example:\n  // const ordersColRef = collection(db, 'orders');\n  // const q = query(ordersColRef, where('userId', '==', user.uid), orderBy('orderDate', 'desc'));\n  // const ordersSnap = await getDocs(q);\n  // return ordersSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Order));\n\n  console.warn(\"getOrderHistory is a placeholder and does not fetch real order data yet.\");\n  \n  // Mock some order data for UI demonstration purposes\n  const mockOrders: Order[] = [\n    // {\n    //   id: 'mockOrder123',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n    //   items: [\n    //     { productId: 'p1', productName: 'Floral Wall Art Set', quantity: 1, price: 'Rs. 1850' },\n    //     { productId: 'p2', productName: 'Gold Sunburst Wall Décor Set', quantity: 2, price: 'Rs. 1299' },\n    //   ],\n    //   totalAmount: 1850 + (1299 * 2),\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Delivered',\n    // },\n    // {\n    //   id: 'mockOrder456',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\n    //   items: [\n    //     { productId: 'p5', productName: 'Rectangular Wall Mirror', quantity: 1, price: 'Rs. 2250' },\n    //   ],\n    //   totalAmount: 2250,\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Shipped',\n    // },\n  ];\n  // return Promise.resolve(mockOrders); // Uncomment to show mock data\n  return Promise.resolve([]); // Default to no orders\n}\n\n"],"names":[],"mappings":";;;;;;IAuJsB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2338, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/profile/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { User } from 'firebase/auth';\nimport { auth, db } from '@/lib/firebase';\nimport { UserProfileSchema, AddressSchema } from '@/lib/schemas';\nimport type { UserProfile, Address, Order } from '@/lib/types';\nimport { doc, getDoc, setDoc, updateDoc, collection, addDoc, getDocs, deleteDoc, query, orderBy } from 'firebase/firestore';\nimport { revalidatePath } from 'next/cache';\n\nexport interface FormState {\n  message: string | null;\n  errors?: Record<string, string[] | undefined> & { _form?: string[] };\n  success: boolean;\n  data?: any;\n}\n\n// --- User Profile Actions ---\n\nexport async function createUserProfileDocument(uid: string, email: string, firstName: string, lastName: string, phoneNumber?: string): Promise<void> {\n  const profileDocRef = doc(db, 'userProfiles', uid);\n  const newProfileData: UserProfile = { \n    uid: uid,\n    email: email,\n    firstName: firstName,\n    lastName: lastName,\n    phoneNumber: phoneNumber || null,\n  };\n  await setDoc(profileDocRef, newProfileData, { merge: true }); \n}\n\n\nexport async function getUserProfile(authenticatedUser?: User | null): Promise<UserProfile | null> {\n  const userToQuery = authenticatedUser || auth.currentUser; \n  if (!userToQuery) return null;\n\n  const profileDocRef = doc(db, 'userProfiles', userToQuery.uid);\n  const profileSnap = await getDoc(profileDocRef);\n\n  if (profileSnap.exists()) {\n    const data = profileSnap.data() as Partial<UserProfile>; \n    let firstName = data.firstName;\n    let lastName = data.lastName;\n    let phoneNumber = data.phoneNumber;\n\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      firstName = firstName || 'Ishanvi'; \n      lastName = lastName || 'Chauhan';\n      // phoneNumber will be whatever is in DB or null/undefined. No specific default phone for Ishanvi here.\n    }\n    \n    return { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: firstName || null, \n        lastName: lastName || null,\n        phoneNumber: phoneNumber || null,\n    } as UserProfile;\n  } else {\n    // New user, create profile document\n    let newFirstName = '';\n    let newLastName = '';\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      newFirstName = 'Ishanvi';\n      newLastName = 'Chauhan';\n    } else if (userToQuery.displayName) {\n        const nameParts = userToQuery.displayName.split(' ');\n        newFirstName = nameParts[0] || '';\n        newLastName = nameParts.slice(1).join(' ') || '';\n    }\n    \n    // For a brand new profile, phoneNumber will be null unless provided during signup (which it isn't currently)\n    const newProfileData: UserProfile = { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: newFirstName || null, \n        lastName: newLastName || null,\n        phoneNumber: null, // Default to null for new profiles\n    };\n    await setDoc(profileDocRef, newProfileData);\n    return newProfileData;\n  }\n}\n\nexport async function updateUserProfile(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = UserProfileSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const profileDocRef = doc(db, 'userProfiles', user.uid);\n    const dataToUpdate: Partial<Pick<UserProfile, 'firstName' | 'lastName' | 'phoneNumber'>> = {};\n\n    let firstNameToSet = validation.data.firstName;\n    let lastNameToSet = validation.data.lastName;\n    // PhoneNumber can be an empty string (to clear it) or a valid number\n    const phoneNumberToSet = validation.data.phoneNumber;\n\n\n    if (user.email === 'ishanvi.chauhan@gmail.com') {\n      firstNameToSet = firstNameToSet === '' ? 'Ishanvi' : (firstNameToSet || 'Ishanvi'); \n      lastNameToSet = lastNameToSet === '' ? 'Chauhan' : (lastNameToSet || 'Chauhan');   \n    }\n    \n    if (firstNameToSet !== undefined) dataToUpdate.firstName = firstNameToSet;\n    if (lastNameToSet !== undefined) dataToUpdate.lastName = lastNameToSet;\n    if (phoneNumberToSet !== undefined) dataToUpdate.phoneNumber = phoneNumberToSet === '' ? null : phoneNumberToSet;\n\n\n    const profileSnap = await getDoc(profileDocRef);\n    if (profileSnap.exists()) {\n        await updateDoc(profileDocRef, dataToUpdate);\n    } else {\n        await setDoc(profileDocRef, { \n            email: user.email || '', \n            ...dataToUpdate \n        });\n    }\n\n    revalidatePath('/profile');\n    return { message: 'Profile updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    return { message: 'Failed to update profile.', success: false, errors: { _form: ['Failed to update profile.'] } };\n  }\n}\n\n\n// --- Shipping Address Actions ---\nexport async function getShippingAddresses(): Promise<Address[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n\n  const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n  const addressesSnap = await getDocs(addressesColRef);\n  \n  return addressesSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Address));\n}\n\nexport async function addShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...addressDataFromSchema } = validation.data; \n    \n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await addDoc(addressesColRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address added successfully!', success: true };\n  } catch (error) {\n    console.error('Error adding address:', error);\n    return { message: 'Failed to add shipping address.', success: false, errors: { _form: ['Failed to add shipping address.'] } };\n  }\n}\n\nexport async function updateShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n  \n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  const { id: addressId, ...addressDataFromSchema } = validation.data;\n\n  if (!addressId) {\n    return { message: 'Address ID is missing for update.', success: false, errors: { _form: ['Address ID is missing.'] } };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n\n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await updateDoc(addressDocRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating address:', error);\n    return { message: 'Failed to update shipping address.', success: false, errors: { _form: ['Failed to update shipping address.'] } };\n  }\n}\n\nexport async function deleteShippingAddress(addressId: string): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false };\n  }\n  if (!addressId) {\n     return { message: 'Address ID is missing for deletion.', success: false };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n    await deleteDoc(addressDocRef);\n    revalidatePath('/profile');\n    return { message: 'Shipping address deleted successfully!', success: true };\n  } catch (error) {\n    console.error('Error deleting address:', error);\n    return { message: 'Failed to delete shipping address.', success: false };\n  }\n}\n\n// --- Order History Actions ---\nexport async function getOrderHistory(): Promise<Order[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n  \n  // This is a placeholder. In a real application, you would query a 'orders' collection\n  // filtered by userId and ordered by date.\n  // For example:\n  // const ordersColRef = collection(db, 'orders');\n  // const q = query(ordersColRef, where('userId', '==', user.uid), orderBy('orderDate', 'desc'));\n  // const ordersSnap = await getDocs(q);\n  // return ordersSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Order));\n\n  console.warn(\"getOrderHistory is a placeholder and does not fetch real order data yet.\");\n  \n  // Mock some order data for UI demonstration purposes\n  const mockOrders: Order[] = [\n    // {\n    //   id: 'mockOrder123',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n    //   items: [\n    //     { productId: 'p1', productName: 'Floral Wall Art Set', quantity: 1, price: 'Rs. 1850' },\n    //     { productId: 'p2', productName: 'Gold Sunburst Wall Décor Set', quantity: 2, price: 'Rs. 1299' },\n    //   ],\n    //   totalAmount: 1850 + (1299 * 2),\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Delivered',\n    // },\n    // {\n    //   id: 'mockOrder456',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\n    //   items: [\n    //     { productId: 'p5', productName: 'Rectangular Wall Mirror', quantity: 1, price: 'Rs. 2250' },\n    //   ],\n    //   totalAmount: 2250,\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Shipped',\n    // },\n  ];\n  // return Promise.resolve(mockOrders); // Uncomment to show mock data\n  return Promise.resolve([]); // Default to no orders\n}\n\n"],"names":[],"mappings":";;;;;;IAiMsB,wBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2351, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/profile/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { User } from 'firebase/auth';\nimport { auth, db } from '@/lib/firebase';\nimport { UserProfileSchema, AddressSchema } from '@/lib/schemas';\nimport type { UserProfile, Address, Order } from '@/lib/types';\nimport { doc, getDoc, setDoc, updateDoc, collection, addDoc, getDocs, deleteDoc, query, orderBy } from 'firebase/firestore';\nimport { revalidatePath } from 'next/cache';\n\nexport interface FormState {\n  message: string | null;\n  errors?: Record<string, string[] | undefined> & { _form?: string[] };\n  success: boolean;\n  data?: any;\n}\n\n// --- User Profile Actions ---\n\nexport async function createUserProfileDocument(uid: string, email: string, firstName: string, lastName: string, phoneNumber?: string): Promise<void> {\n  const profileDocRef = doc(db, 'userProfiles', uid);\n  const newProfileData: UserProfile = { \n    uid: uid,\n    email: email,\n    firstName: firstName,\n    lastName: lastName,\n    phoneNumber: phoneNumber || null,\n  };\n  await setDoc(profileDocRef, newProfileData, { merge: true }); \n}\n\n\nexport async function getUserProfile(authenticatedUser?: User | null): Promise<UserProfile | null> {\n  const userToQuery = authenticatedUser || auth.currentUser; \n  if (!userToQuery) return null;\n\n  const profileDocRef = doc(db, 'userProfiles', userToQuery.uid);\n  const profileSnap = await getDoc(profileDocRef);\n\n  if (profileSnap.exists()) {\n    const data = profileSnap.data() as Partial<UserProfile>; \n    let firstName = data.firstName;\n    let lastName = data.lastName;\n    let phoneNumber = data.phoneNumber;\n\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      firstName = firstName || 'Ishanvi'; \n      lastName = lastName || 'Chauhan';\n      // phoneNumber will be whatever is in DB or null/undefined. No specific default phone for Ishanvi here.\n    }\n    \n    return { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: firstName || null, \n        lastName: lastName || null,\n        phoneNumber: phoneNumber || null,\n    } as UserProfile;\n  } else {\n    // New user, create profile document\n    let newFirstName = '';\n    let newLastName = '';\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      newFirstName = 'Ishanvi';\n      newLastName = 'Chauhan';\n    } else if (userToQuery.displayName) {\n        const nameParts = userToQuery.displayName.split(' ');\n        newFirstName = nameParts[0] || '';\n        newLastName = nameParts.slice(1).join(' ') || '';\n    }\n    \n    // For a brand new profile, phoneNumber will be null unless provided during signup (which it isn't currently)\n    const newProfileData: UserProfile = { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: newFirstName || null, \n        lastName: newLastName || null,\n        phoneNumber: null, // Default to null for new profiles\n    };\n    await setDoc(profileDocRef, newProfileData);\n    return newProfileData;\n  }\n}\n\nexport async function updateUserProfile(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = UserProfileSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const profileDocRef = doc(db, 'userProfiles', user.uid);\n    const dataToUpdate: Partial<Pick<UserProfile, 'firstName' | 'lastName' | 'phoneNumber'>> = {};\n\n    let firstNameToSet = validation.data.firstName;\n    let lastNameToSet = validation.data.lastName;\n    // PhoneNumber can be an empty string (to clear it) or a valid number\n    const phoneNumberToSet = validation.data.phoneNumber;\n\n\n    if (user.email === 'ishanvi.chauhan@gmail.com') {\n      firstNameToSet = firstNameToSet === '' ? 'Ishanvi' : (firstNameToSet || 'Ishanvi'); \n      lastNameToSet = lastNameToSet === '' ? 'Chauhan' : (lastNameToSet || 'Chauhan');   \n    }\n    \n    if (firstNameToSet !== undefined) dataToUpdate.firstName = firstNameToSet;\n    if (lastNameToSet !== undefined) dataToUpdate.lastName = lastNameToSet;\n    if (phoneNumberToSet !== undefined) dataToUpdate.phoneNumber = phoneNumberToSet === '' ? null : phoneNumberToSet;\n\n\n    const profileSnap = await getDoc(profileDocRef);\n    if (profileSnap.exists()) {\n        await updateDoc(profileDocRef, dataToUpdate);\n    } else {\n        await setDoc(profileDocRef, { \n            email: user.email || '', \n            ...dataToUpdate \n        });\n    }\n\n    revalidatePath('/profile');\n    return { message: 'Profile updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    return { message: 'Failed to update profile.', success: false, errors: { _form: ['Failed to update profile.'] } };\n  }\n}\n\n\n// --- Shipping Address Actions ---\nexport async function getShippingAddresses(): Promise<Address[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n\n  const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n  const addressesSnap = await getDocs(addressesColRef);\n  \n  return addressesSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Address));\n}\n\nexport async function addShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...addressDataFromSchema } = validation.data; \n    \n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await addDoc(addressesColRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address added successfully!', success: true };\n  } catch (error) {\n    console.error('Error adding address:', error);\n    return { message: 'Failed to add shipping address.', success: false, errors: { _form: ['Failed to add shipping address.'] } };\n  }\n}\n\nexport async function updateShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n  \n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  const { id: addressId, ...addressDataFromSchema } = validation.data;\n\n  if (!addressId) {\n    return { message: 'Address ID is missing for update.', success: false, errors: { _form: ['Address ID is missing.'] } };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n\n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await updateDoc(addressDocRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating address:', error);\n    return { message: 'Failed to update shipping address.', success: false, errors: { _form: ['Failed to update shipping address.'] } };\n  }\n}\n\nexport async function deleteShippingAddress(addressId: string): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false };\n  }\n  if (!addressId) {\n     return { message: 'Address ID is missing for deletion.', success: false };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n    await deleteDoc(addressDocRef);\n    revalidatePath('/profile');\n    return { message: 'Shipping address deleted successfully!', success: true };\n  } catch (error) {\n    console.error('Error deleting address:', error);\n    return { message: 'Failed to delete shipping address.', success: false };\n  }\n}\n\n// --- Order History Actions ---\nexport async function getOrderHistory(): Promise<Order[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n  \n  // This is a placeholder. In a real application, you would query a 'orders' collection\n  // filtered by userId and ordered by date.\n  // For example:\n  // const ordersColRef = collection(db, 'orders');\n  // const q = query(ordersColRef, where('userId', '==', user.uid), orderBy('orderDate', 'desc'));\n  // const ordersSnap = await getDocs(q);\n  // return ordersSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Order));\n\n  console.warn(\"getOrderHistory is a placeholder and does not fetch real order data yet.\");\n  \n  // Mock some order data for UI demonstration purposes\n  const mockOrders: Order[] = [\n    // {\n    //   id: 'mockOrder123',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n    //   items: [\n    //     { productId: 'p1', productName: 'Floral Wall Art Set', quantity: 1, price: 'Rs. 1850' },\n    //     { productId: 'p2', productName: 'Gold Sunburst Wall Décor Set', quantity: 2, price: 'Rs. 1299' },\n    //   ],\n    //   totalAmount: 1850 + (1299 * 2),\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Delivered',\n    // },\n    // {\n    //   id: 'mockOrder456',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\n    //   items: [\n    //     { productId: 'p5', productName: 'Rectangular Wall Mirror', quantity: 1, price: 'Rs. 2250' },\n    //   ],\n    //   totalAmount: 2250,\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Shipped',\n    // },\n  ];\n  // return Promise.resolve(mockOrders); // Uncomment to show mock data\n  return Promise.resolve([]); // Default to no orders\n}\n\n"],"names":[],"mappings":";;;;;;IA+OsB,wBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2364, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/profile/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { User } from 'firebase/auth';\nimport { auth, db } from '@/lib/firebase';\nimport { UserProfileSchema, AddressSchema } from '@/lib/schemas';\nimport type { UserProfile, Address, Order } from '@/lib/types';\nimport { doc, getDoc, setDoc, updateDoc, collection, addDoc, getDocs, deleteDoc, query, orderBy } from 'firebase/firestore';\nimport { revalidatePath } from 'next/cache';\n\nexport interface FormState {\n  message: string | null;\n  errors?: Record<string, string[] | undefined> & { _form?: string[] };\n  success: boolean;\n  data?: any;\n}\n\n// --- User Profile Actions ---\n\nexport async function createUserProfileDocument(uid: string, email: string, firstName: string, lastName: string, phoneNumber?: string): Promise<void> {\n  const profileDocRef = doc(db, 'userProfiles', uid);\n  const newProfileData: UserProfile = { \n    uid: uid,\n    email: email,\n    firstName: firstName,\n    lastName: lastName,\n    phoneNumber: phoneNumber || null,\n  };\n  await setDoc(profileDocRef, newProfileData, { merge: true }); \n}\n\n\nexport async function getUserProfile(authenticatedUser?: User | null): Promise<UserProfile | null> {\n  const userToQuery = authenticatedUser || auth.currentUser; \n  if (!userToQuery) return null;\n\n  const profileDocRef = doc(db, 'userProfiles', userToQuery.uid);\n  const profileSnap = await getDoc(profileDocRef);\n\n  if (profileSnap.exists()) {\n    const data = profileSnap.data() as Partial<UserProfile>; \n    let firstName = data.firstName;\n    let lastName = data.lastName;\n    let phoneNumber = data.phoneNumber;\n\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      firstName = firstName || 'Ishanvi'; \n      lastName = lastName || 'Chauhan';\n      // phoneNumber will be whatever is in DB or null/undefined. No specific default phone for Ishanvi here.\n    }\n    \n    return { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: firstName || null, \n        lastName: lastName || null,\n        phoneNumber: phoneNumber || null,\n    } as UserProfile;\n  } else {\n    // New user, create profile document\n    let newFirstName = '';\n    let newLastName = '';\n    if (userToQuery.email === 'ishanvi.chauhan@gmail.com') {\n      newFirstName = 'Ishanvi';\n      newLastName = 'Chauhan';\n    } else if (userToQuery.displayName) {\n        const nameParts = userToQuery.displayName.split(' ');\n        newFirstName = nameParts[0] || '';\n        newLastName = nameParts.slice(1).join(' ') || '';\n    }\n    \n    // For a brand new profile, phoneNumber will be null unless provided during signup (which it isn't currently)\n    const newProfileData: UserProfile = { \n        uid: userToQuery.uid, \n        email: userToQuery.email || '', \n        firstName: newFirstName || null, \n        lastName: newLastName || null,\n        phoneNumber: null, // Default to null for new profiles\n    };\n    await setDoc(profileDocRef, newProfileData);\n    return newProfileData;\n  }\n}\n\nexport async function updateUserProfile(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = UserProfileSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const profileDocRef = doc(db, 'userProfiles', user.uid);\n    const dataToUpdate: Partial<Pick<UserProfile, 'firstName' | 'lastName' | 'phoneNumber'>> = {};\n\n    let firstNameToSet = validation.data.firstName;\n    let lastNameToSet = validation.data.lastName;\n    // PhoneNumber can be an empty string (to clear it) or a valid number\n    const phoneNumberToSet = validation.data.phoneNumber;\n\n\n    if (user.email === 'ishanvi.chauhan@gmail.com') {\n      firstNameToSet = firstNameToSet === '' ? 'Ishanvi' : (firstNameToSet || 'Ishanvi'); \n      lastNameToSet = lastNameToSet === '' ? 'Chauhan' : (lastNameToSet || 'Chauhan');   \n    }\n    \n    if (firstNameToSet !== undefined) dataToUpdate.firstName = firstNameToSet;\n    if (lastNameToSet !== undefined) dataToUpdate.lastName = lastNameToSet;\n    if (phoneNumberToSet !== undefined) dataToUpdate.phoneNumber = phoneNumberToSet === '' ? null : phoneNumberToSet;\n\n\n    const profileSnap = await getDoc(profileDocRef);\n    if (profileSnap.exists()) {\n        await updateDoc(profileDocRef, dataToUpdate);\n    } else {\n        await setDoc(profileDocRef, { \n            email: user.email || '', \n            ...dataToUpdate \n        });\n    }\n\n    revalidatePath('/profile');\n    return { message: 'Profile updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    return { message: 'Failed to update profile.', success: false, errors: { _form: ['Failed to update profile.'] } };\n  }\n}\n\n\n// --- Shipping Address Actions ---\nexport async function getShippingAddresses(): Promise<Address[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n\n  const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n  const addressesSnap = await getDocs(addressesColRef);\n  \n  return addressesSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Address));\n}\n\nexport async function addShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n\n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  try {\n    const addressesColRef = collection(db, 'userProfiles', user.uid, 'shippingAddresses');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...addressDataFromSchema } = validation.data; \n    \n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await addDoc(addressesColRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address added successfully!', success: true };\n  } catch (error) {\n    console.error('Error adding address:', error);\n    return { message: 'Failed to add shipping address.', success: false, errors: { _form: ['Failed to add shipping address.'] } };\n  }\n}\n\nexport async function updateShippingAddress(prevState: FormState, formData: FormData): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false, errors: { _form: ['User not authenticated.'] } };\n  }\n\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validation = AddressSchema.safeParse(rawFormData);\n  \n  if (!validation.success) {\n    return {\n      errors: validation.error.flatten().fieldErrors,\n      message: 'Invalid address data. Please check your input.',\n      success: false,\n    };\n  }\n\n  const { id: addressId, ...addressDataFromSchema } = validation.data;\n\n  if (!addressId) {\n    return { message: 'Address ID is missing for update.', success: false, errors: { _form: ['Address ID is missing.'] } };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n\n    const payload: Omit<Address, 'id'> = {\n        fullName: addressDataFromSchema.fullName,\n        addressLine1: addressDataFromSchema.addressLine1,\n        addressLine2: addressDataFromSchema.addressLine2 || null,\n        city: addressDataFromSchema.city,\n        state: addressDataFromSchema.state,\n        postalCode: addressDataFromSchema.postalCode,\n        country: addressDataFromSchema.country,\n        phoneNumber: addressDataFromSchema.phoneNumber || null,\n    };\n\n    await updateDoc(addressDocRef, payload);\n    revalidatePath('/profile');\n    return { message: 'Shipping address updated successfully!', success: true };\n  } catch (error) {\n    console.error('Error updating address:', error);\n    return { message: 'Failed to update shipping address.', success: false, errors: { _form: ['Failed to update shipping address.'] } };\n  }\n}\n\nexport async function deleteShippingAddress(addressId: string): Promise<FormState> {\n  const user = auth.currentUser;\n  if (!user) {\n    return { message: 'User not authenticated.', success: false };\n  }\n  if (!addressId) {\n     return { message: 'Address ID is missing for deletion.', success: false };\n  }\n\n  try {\n    const addressDocRef = doc(db, 'userProfiles', user.uid, 'shippingAddresses', addressId);\n    await deleteDoc(addressDocRef);\n    revalidatePath('/profile');\n    return { message: 'Shipping address deleted successfully!', success: true };\n  } catch (error) {\n    console.error('Error deleting address:', error);\n    return { message: 'Failed to delete shipping address.', success: false };\n  }\n}\n\n// --- Order History Actions ---\nexport async function getOrderHistory(): Promise<Order[]> {\n  const user = auth.currentUser;\n  if (!user) return [];\n  \n  // This is a placeholder. In a real application, you would query a 'orders' collection\n  // filtered by userId and ordered by date.\n  // For example:\n  // const ordersColRef = collection(db, 'orders');\n  // const q = query(ordersColRef, where('userId', '==', user.uid), orderBy('orderDate', 'desc'));\n  // const ordersSnap = await getDocs(q);\n  // return ordersSnap.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() } as Order));\n\n  console.warn(\"getOrderHistory is a placeholder and does not fetch real order data yet.\");\n  \n  // Mock some order data for UI demonstration purposes\n  const mockOrders: Order[] = [\n    // {\n    //   id: 'mockOrder123',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n    //   items: [\n    //     { productId: 'p1', productName: 'Floral Wall Art Set', quantity: 1, price: 'Rs. 1850' },\n    //     { productId: 'p2', productName: 'Gold Sunburst Wall Décor Set', quantity: 2, price: 'Rs. 1299' },\n    //   ],\n    //   totalAmount: 1850 + (1299 * 2),\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Delivered',\n    // },\n    // {\n    //   id: 'mockOrder456',\n    //   userId: user.uid,\n    //   orderDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\n    //   items: [\n    //     { productId: 'p5', productName: 'Rectangular Wall Mirror', quantity: 1, price: 'Rs. 2250' },\n    //   ],\n    //   totalAmount: 2250,\n    //   shippingAddress: { fullName: 'Test User', addressLine1: '123 Mock St', city: 'Mockville', state: 'MS', postalCode: '00000', country: 'India' },\n    //   status: 'Shipped',\n    // },\n  ];\n  // return Promise.resolve(mockOrders); // Uncomment to show mock data\n  return Promise.resolve([]); // Default to no orders\n}\n\n"],"names":[],"mappings":";;;;;;IAoQsB,kBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2377, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/profile/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useState, useActionState } from 'react';\nimport Link from 'next/link';\nimport { useAuth } from '@/contexts/auth-context';\nimport { useRouter } from 'next/navigation';\nimport Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Loader2, UserCircle2, Home, Edit3, Trash2, PlusCircle, ShoppingBag, Info, AlertTriangle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { UserProfile, Address, Order } from '@/lib/types';\nimport { UserProfileSchema, AddressSchema, type UserProfileInput, type AddressInput } from '@/lib/schemas';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogClose,\n} from \"@/components/ui/dialog\"\nimport {\n  getUserProfile,\n  updateUserProfile,\n  getShippingAddresses,\n  addShippingAddress,\n  updateShippingAddress,\n  deleteShippingAddress,\n  getOrderHistory,\n  type FormState\n} from './actions';\n\nfunction ProfileSubmitButton({ pending, text = \"Save Changes\", icon }: { pending: boolean, text?: string, icon?: React.ReactNode }) {\n  return (\n    <Button type=\"submit\" disabled={pending}>\n      {pending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : (icon ? <span className=\"mr-2\">{icon}</span> : null)}\n      {text}\n    </Button>\n  );\n}\n\nexport default function ProfilePage() {\n  const { user, loading: authLoading } \n    = useAuth();\n  const router = useRouter(); \n  const { toast } = useToast();\n\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [addresses, setAddresses] = useState<Address[]>([]);\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [isLoadingPageData, setIsLoadingPageData] = useState(true); // Renamed from isLoadingData for clarity\n  \n  const [isAddressModalOpen, setIsAddressModalOpen] = useState(false);\n  const [editingAddress, setEditingAddress] = useState<Address | null>(null);\n\n  const initialFormState: FormState = { message: null, success: false, errors: undefined };\n  const [profileFormState, profileFormAction, isProfileSubmitting] = useActionState(updateUserProfile, initialFormState);\n  \n  const [addAddressState, addAddressAction, isAddingAddress] = useActionState(addShippingAddress, initialFormState);\n  const [updateAddressState, updateAddressAction, isUpdatingAddress] = useActionState(updateShippingAddress, initialFormState);\n  \n  const profileForm = useForm<UserProfileInput>({\n    resolver: zodResolver(UserProfileSchema),\n    defaultValues: { firstName: '', lastName: '', phoneNumber: '' },\n  });\n\n  const addressForm = useForm<AddressInput>({\n    resolver: zodResolver(AddressSchema),\n    defaultValues: {\n      fullName: '', addressLine1: '', addressLine2: '', city: '',\n      state: '', postalCode: '', country: 'India', phoneNumber: '',\n    },\n  });\n\n  // Route Protection and Initial Data Fetch\n  useEffect(() => {\n    if (!authLoading) { // Only proceed once auth state is resolved\n      if (!user) {\n        toast({\n          title: \"Access Denied\",\n          description: \"Please log in to view your profile.\",\n          variant: \"destructive\"\n        });\n        router.replace('/signin?redirect=/profile');\n      } else {\n        // User is logged in, fetch their data\n        fetchProfileData();\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user, authLoading, router]);\n\n  const fetchProfileData = async () => {\n    setIsLoadingPageData(true);\n    try {\n      // Ensure user is available for these calls, though route protection should handle it\n      if (!user) {\n        setIsLoadingPageData(false);\n        return;\n      }\n      const [profileData, addressesData, ordersData] = await Promise.all([\n        getUserProfile(user), \n        getShippingAddresses(), \n        getOrderHistory()\n      ]);\n      \n      setUserProfile(profileData);\n      profileForm.reset({ \n        firstName: profileData?.firstName || '', \n        lastName: profileData?.lastName || '',\n        phoneNumber: profileData?.phoneNumber || '',\n      });\n\n      setAddresses(addressesData);\n      setOrders(ordersData);\n\n    } catch (error) {\n      console.error(\"Failed to load profile data:\", error)\n      toast({ title: \"Error\", description: \"Failed to load profile data.\", variant: \"destructive\" });\n    } finally {\n      setIsLoadingPageData(false);\n    }\n  };\n\n  // Handle Profile Form Server Action State\n  useEffect(() => {\n    if (profileFormState.message) {\n      toast({\n        title: profileFormState.success ? 'Success' : 'Error',\n        description: profileFormState.message,\n        variant: profileFormState.success ? 'default' : 'destructive',\n      });\n       if (profileFormState.errors) {\n        Object.entries(profileFormState.errors).forEach(([field, messages]) => {\n          if (messages && field !== '_form') { \n            profileForm.setError(field as keyof UserProfileInput, { type: 'server', message: messages.join(', ') });\n          }\n        });\n      }\n      if (profileFormState.success) {\n        fetchProfileData(); \n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [profileFormState]);\n\n  // Handle Address Form Server Action State (Add/Update)\n  const handleAddressFormSuccess = (state: FormState) => { \n     if (state.message) {\n      toast({\n        title: state.success ? 'Success' : 'Error',\n        description: state.message,\n        variant: state.success ? 'default' : 'destructive',\n      });\n      if (state.errors) {\n        Object.entries(state.errors).forEach(([field, messages]) => {\n          if (messages && field !== '_form') {\n             addressForm.setError(field as keyof AddressInput, { type: 'server', message: messages.join(', ') });\n          }\n        });\n      }\n      if (state.success) {\n        fetchProfileData();\n        setIsAddressModalOpen(false);\n        setEditingAddress(null);\n        addressForm.reset({\n            fullName: '', addressLine1: '', addressLine2: '', city: '',\n            state: '', postalCode: '', country: 'India', phoneNumber: ''\n        });\n      }\n    }\n  }\n\n  useEffect(() => {\n    handleAddressFormSuccess(addAddressState);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addAddressState]);\n\n  useEffect(() => {\n    handleAddressFormSuccess(updateAddressState);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [updateAddressState]);\n\n\n  const handleOpenAddAddressModal = () => {\n    setEditingAddress(null);\n    addressForm.reset({ \n        fullName: '', addressLine1: '', addressLine2: '', city: '',\n        state: '', postalCode: '', country: 'India', phoneNumber: ''\n    });\n    setIsAddressModalOpen(true);\n  };\n\n  const handleOpenEditAddressModal = (address: Address) => {\n    setEditingAddress(address);\n    addressForm.reset({ ...address, phoneNumber: address.phoneNumber || '' }); \n    setIsAddressModalOpen(true);\n  };\n\n  const handleDeleteAddress = async (addressId?: string) => {\n    if (!addressId) return;\n    const confirmed = window.confirm('Are you sure you want to delete this address?');\n    if (!confirmed) return;\n\n    const result = await deleteShippingAddress(addressId);\n    toast({\n      title: result.success ? 'Success' : 'Error',\n      description: result.message || 'Operation status unknown',\n      variant: result.success ? 'default' : 'destructive',\n    });\n    if (result.success) {\n      fetchProfileData();\n    }\n  };\n\n  const onAddressFormSubmit: SubmitHandler<AddressInput> = (data) => {\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n             formData.append(key, String(value));\n        }\n    });\n\n    if (editingAddress && editingAddress.id) {\n        formData.append('id', editingAddress.id);\n        updateAddressAction(formData);\n    } else {\n        addAddressAction(formData);\n    }\n  };\n  \n  if (authLoading || isLoadingPageData) { \n    return (\n      <div className=\"flex flex-col min-h-screen bg-background\">\n        <Header />\n        <main className=\"flex-grow container mx-auto px-2 py-8 md:py-12 flex justify-center items-center\">\n          <Loader2 className=\"h-12 w-12 text-primary animate-spin\" />\n          <p className=\"ml-4 text-lg text-muted-foreground\">Loading profile data...</p>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!user) { // Should be caught by useEffect redirect, but as a fallback\n    return (\n      <div className=\"flex flex-col min-h-screen bg-background\">\n        <Header />\n        <main className=\"flex-grow container mx-auto px-2 py-8 md:py-12 text-center\">\n            <AlertTriangle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n            <h1 className=\"text-3xl font-headline text-primary mb-2\">Access Denied</h1>\n            <p className=\"text-muted-foreground mb-6\">Please log in to view your profile.</p>\n            <Button asChild size=\"lg\">\n              <Link href=\"/signin\">Log In</Link>\n            </Button>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n      <main className=\"flex-grow container mx-auto px-2 py-8 md:py-12\">\n        <div className=\"flex items-center space-x-3 mb-10\">\n          <UserCircle2 className=\"h-10 w-10 text-primary\" />\n          <h1 className=\"text-4xl font-headline text-primary\">My Profile</h1>\n        </div>\n\n        <Card className=\"mb-8 shadow-lg rounded-lg border-border/70\">\n          <CardHeader>\n            <CardTitle className=\"font-headline text-2xl text-primary\">Personal Details</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...profileForm}>\n              <form action={profileFormAction} className=\"space-y-6\">\n                 <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={profileForm.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Your first name\" {...field} value={field.value || ''} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={profileForm.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Your last name\" {...field} value={field.value || ''} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                      control={profileForm.control}\n                      name=\"phoneNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number (Optional)</FormLabel>\n                          <FormControl>\n                            <Input type=\"tel\" placeholder=\"e.g. +911234567890\" {...field} value={field.value || ''} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                <div>\n                  <Label>Email</Label>\n                  <Input type=\"email\" value={userProfile?.email || user?.email || ''} disabled className=\"mt-1 bg-muted/50\"/>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Email cannot be changed.\n                  </p>\n                </div>\n                 {profileFormState.errors?._form && (\n                  <p className=\"text-sm font-medium text-destructive\">{profileFormState.errors._form.join(', ')}</p>\n                )}\n                <ProfileSubmitButton pending={isProfileSubmitting} />\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        <Separator className=\"my-10\" />\n\n        <Card className=\"mb-8 shadow-lg rounded-lg border-border/70\">\n          <CardHeader className=\"flex flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-2\">\n                <Home className=\"h-6 w-6 text-primary\" />\n                <CardTitle className=\"font-headline text-2xl text-primary\">Shipping Addresses</CardTitle>\n            </div>\n            <Dialog open={isAddressModalOpen} onOpenChange={(isOpen) => {\n              setIsAddressModalOpen(isOpen);\n              if (!isOpen) { \n                setEditingAddress(null);\n                addressForm.reset({\n                    fullName: '', addressLine1: '', addressLine2: '', city: '',\n                    state: '', postalCode: '', country: 'India', phoneNumber: ''\n                });\n              }\n            }}>\n              <DialogTrigger asChild>\n                <Button onClick={handleOpenAddAddressModal}>\n                  <PlusCircle className=\"mr-2 h-4 w-4\" /> Add New Address\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\">\n                 <Form {...addressForm}>\n                    <form \n                        onSubmit={addressForm.handleSubmit(onAddressFormSubmit)}\n                        className=\"space-y-4\"\n                    >\n                      <DialogHeader>\n                        <DialogTitle className=\"font-headline text-xl text-primary\">\n                          {editingAddress ? 'Edit Shipping Address' : 'Add New Shipping Address'}\n                        </DialogTitle>\n                        <DialogDescription>\n                          Please fill in the details for your shipping address.\n                        </DialogDescription>\n                      </DialogHeader>\n                      \n                      <FormField control={addressForm.control} name=\"fullName\" render={({ field }) => (\n                        <FormItem><FormLabel>Full Name</FormLabel><FormControl><Input placeholder=\"Priya Sharma\" {...field} /></FormControl><FormMessage /></FormItem>\n                      )}/>\n                      <FormField control={addressForm.control} name=\"addressLine1\" render={({ field }) => (\n                        <FormItem><FormLabel>Address Line 1</FormLabel><FormControl><Input placeholder=\"123, Lotus Lane\" {...field} /></FormControl><FormMessage /></FormItem>\n                      )}/>\n                      <FormField control={addressForm.control} name=\"addressLine2\" render={({ field }) => (\n                        <FormItem><FormLabel>Address Line 2 (Optional)</FormLabel><FormControl><Input placeholder=\"Near Rose Garden\" {...field} value={field.value || ''} /></FormControl><FormMessage /></FormItem>\n                      )}/>\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        <FormField control={addressForm.control} name=\"city\" render={({ field }) => (\n                            <FormItem><FormLabel>City</FormLabel><FormControl><Input placeholder=\"Mumbai\" {...field} /></FormControl><FormMessage /></FormItem>\n                        )}/>\n                        <FormField control={addressForm.control} name=\"state\" render={({ field }) => (\n                            <FormItem><FormLabel>State / Province</FormLabel><FormControl><Input placeholder=\"Maharashtra\" {...field} /></FormControl><FormMessage /></FormItem>\n                        )}/>\n                      </div>\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        <FormField control={addressForm.control} name=\"postalCode\" render={({ field }) => (\n                            <FormItem><FormLabel>Postal Code</FormLabel><FormControl><Input placeholder=\"400001\" {...field} /></FormControl><FormMessage /></FormItem>\n                        )}/>\n                        <FormField control={addressForm.control} name=\"country\" render={({ field }) => (\n                            <FormItem><FormLabel>Country</FormLabel><FormControl><Input placeholder=\"India\" {...field} /></FormControl><FormMessage /></FormItem>\n                        )}/>\n                      </div>\n                      <FormField control={addressForm.control} name=\"phoneNumber\" render={({ field }) => (\n                        <FormItem><FormLabel>Phone Number (Optional)</FormLabel><FormControl><Input type=\"tel\" placeholder=\"e.g. +919876543210\" {...field} value={field.value || ''} /></FormControl><FormMessage /></FormItem>\n                      )}/>\n                       {(addAddressState.errors?._form && !editingAddress) && (\n                        <p className=\"text-sm font-medium text-destructive\">{addAddressState.errors._form.join(', ')}</p>\n                       )}\n                       {(updateAddressState.errors?._form && editingAddress) && (\n                        <p className=\"text-sm font-medium text-destructive\">{updateAddressState.errors._form.join(', ')}</p>\n                       )}\n                      <DialogFooter>\n                        <DialogClose asChild>\n                            <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                        </DialogClose>\n                        <ProfileSubmitButton pending={editingAddress ? isUpdatingAddress : isAddingAddress} text={editingAddress ? \"Update Address\" : \"Add Address\"} />\n                      </DialogFooter>\n                    </form>\n                  </Form>\n              </DialogContent>\n            </Dialog>\n          </CardHeader>\n          <CardContent>\n            {addresses.length === 0 ? (\n              <div className=\"text-center py-6 text-muted-foreground\">\n                <Home className=\"mx-auto h-10 w-10 mb-3 opacity-50\" />\n                <p>You haven&apos;t added any shipping addresses yet.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {addresses.map((address) => (\n                  <Card key={address.id} className=\"p-4 border-border/50 shadow-sm animate-pop-in\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <p className=\"font-semibold text-foreground\">{address.fullName}</p>\n                        <p className=\"text-sm text-muted-foreground\">{address.addressLine1}</p>\n                        {address.addressLine2 && <p className=\"text-sm text-muted-foreground\">{address.addressLine2}</p>}\n                        <p className=\"text-sm text-muted-foreground\">\n                          {address.city}, {address.state} - {address.postalCode}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">{address.country}</p>\n                        {address.phoneNumber && <p className=\"text-sm text-muted-foreground\">Phone: {address.phoneNumber}</p>}\n                      </div>\n                      <div className=\"flex gap-2 flex-shrink-0\">\n                        <Button variant=\"outline\" size=\"icon\" onClick={() => handleOpenEditAddressModal(address)}>\n                          <Edit3 className=\"h-4 w-4\" />\n                           <span className=\"sr-only\">Edit Address</span>\n                        </Button>\n                        <Button variant=\"destructive\" size=\"icon\" onClick={() => handleDeleteAddress(address.id)}>\n                          <Trash2 className=\"h-4 w-4\" />\n                           <span className=\"sr-only\">Delete Address</span>\n                        </Button>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Separator className=\"my-10\" />\n\n        <Card className=\"shadow-lg rounded-lg border-border/70\">\n           <CardHeader>\n            <div className=\"flex items-center space-x-2\">\n                <ShoppingBag className=\"h-6 w-6 text-primary\" />\n                <CardTitle className=\"font-headline text-2xl text-primary\">Order History</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {orders.length === 0 ? (\n              <div className=\"text-center py-6 text-muted-foreground\">\n                <ShoppingBag className=\"mx-auto h-10 w-10 mb-3 opacity-50\" />\n                 <p>You haven&apos;t placed any orders yet.</p>\n                <Button asChild variant=\"link\" className=\"mt-2\">\n                    <Link href=\"/collections\">Start Shopping</Link>\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {orders.map((order) => (\n                  <Card key={order.id} className=\"p-4 border-border/50 shadow-sm animate-pop-in\">\n                    <div className=\"flex flex-col sm:flex-row justify-between sm:items-start gap-3\">\n                      <div className=\"flex-grow\">\n                        <p className=\"font-semibold text-foreground\">Order ID: {order.id.substring(0,8)}...</p>\n                        <p className=\"text-sm text-muted-foreground\">Date: {new Date(order.orderDate).toLocaleDateString()}</p>\n                        <p className=\"text-sm text-muted-foreground\">Total: Rs. {order.totalAmount.toFixed(2)}</p>\n                        <p className=\"text-sm text-muted-foreground\">Status: <span className=\"font-medium\">{order.status}</span></p>\n                         <div className=\"mt-2 text-xs text-muted-foreground\">\n                            {order.items.map(item => item.productName).join(', ')}\n                        </div>\n                      </div>\n                       <Button variant=\"outline\" size=\"sm\" asChild disabled> \n                          <Link href={`/profile/orders/${order.id}`}>View Details</Link>\n                       </Button>\n                    </div>\n                  </Card>\n                ))}\n                 {orders.length > 0 && (\n                    <div className=\"text-center py-6 text-muted-foreground border-t mt-6 pt-6\">\n                        <Info className=\"mx-auto h-8 w-8 mb-3 opacity-50\" />\n                        <p>Full order details page is coming soon!</p>\n                    </div>\n                 )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}