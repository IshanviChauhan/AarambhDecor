{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  // allow global `var` declarations\n  // eslint-disable-next-line no-unused-vars\n  var prisma: PrismaClient | undefined;\n}\n\nconst prisma =\n  global.prisma ||\n  new PrismaClient({\n    // log: ['query', 'info', 'warn', 'error'], // Uncomment for Prisma query logging\n  });\n\nif (process.env.NODE_ENV !== 'production') {\n  global.prisma = prisma;\n}\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;;AAQA,MAAM,SACJ,OAAO,MAAM,IACb,IAAI,6HAAA,CAAA,eAAY,CAAC;AAEjB;AAEF,wCAA2C;IACzC,OAAO,MAAM,GAAG;AAClB;uCAEe","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { type NextAuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport bcrypt from 'bcryptjs';\nimport prisma from '@/lib/db';\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email', placeholder: 'jsmith@example.com' },\n        password: { label: 'Password', type: 'password' },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error('Email and password are required.');\n        }\n\n        const user = await prisma.user.findUnique({\n          where: { email: credentials.email },\n        });\n\n        if (!user || !user.password) { // Check if user exists and has a password\n          throw new Error('Invalid email or password.');\n        }\n\n        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\n        if (!isPasswordValid) {\n          throw new Error('Invalid email or password.');\n        }\n        // Return an object that matches the User type defined in next-auth.d.ts\n        return { \n          id: user.id.toString(), // Ensure id is a string for NextAuth token\n          email: user.email, \n          firstName: user.firstName, \n          lastName: user.lastName, \n          phone: user.phone \n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: 'jwt', // Using JWT for session management\n  },\n  pages: {\n    signIn: '/auth/signin', // Custom sign-in page path\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id; // user.id comes from authorize func, should be string\n        token.email = user.email;\n        token.firstName = user.firstName;\n        token.lastName = user.lastName;\n        token.phone = user.phone;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token && session.user) {\n        session.user.id = token.id as string;\n        session.user.email = token.email as string;\n        session.user.firstName = token.firstName as string;\n        session.user.lastName = token.lastName as string;\n        session.user.phone = token.phone as string | null | undefined;\n      }\n      return session;\n    },\n  },\n  secret: process.env.JWT_SECRET, // Uses JWT_SECRET from .env\n  debug: process.env.NODE_ENV === 'development',\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAS,aAAa;gBAAqB;gBAC1E,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACpC;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBAChF,IAAI,CAAC,iBAAiB;oBACpB,MAAM,IAAI,MAAM;gBAClB;gBACA,wEAAwE;gBACxE,OAAO;oBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;oBACpB,OAAO,KAAK,KAAK;oBACjB,WAAW,KAAK,SAAS;oBACzB,UAAU,KAAK,QAAQ;oBACvB,OAAO,KAAK,KAAK;gBACnB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE,EAAE,sDAAsD;gBAC1E,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,SAAS,GAAG,KAAK,SAAS;gBAChC,MAAM,QAAQ,GAAG,KAAK,QAAQ;gBAC9B,MAAM,KAAK,GAAG,KAAK,KAAK;YAC1B;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;gBAChC,QAAQ,IAAI,CAAC,SAAS,GAAG,MAAM,SAAS;gBACxC,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;gBACtC,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAClC;YACA,OAAO;QACT;IACF;IACA,QAAQ,QAAQ,GAAG,CAAC,UAAU;IAC9B,OAAO,oDAAyB;AAClC;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}