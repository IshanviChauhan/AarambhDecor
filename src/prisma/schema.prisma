// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Explicitly list binary targets. 'native' is often a good default.
  // Adding debian-openssl-1.1.x and debian-openssl-3.0.x provides fallbacks.
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql" // Or your chosen database: mysql, sqlite, sqlserver, mongodb
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String? // Made optional to align with User type in next-auth.d.ts
  lastName  String? // Made optional
  phone     String?  // Made optional

  // Optional: Add fields for NextAuth.js session management if needed,
  // though NextAuth.js handles this with its own adapter or JWTs.
  // accounts Account[]
  // sessions Session[]

  @@map("users") // Explicitly map to "users" table, good practice
}

// If you were using NextAuth.js with an adapter, you might add these models:
// model Account {
//   id                String  @id @default(cuid())
//   userId            Int
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@unique([provider, providerAccountId])
// }
// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       Int
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   @@unique([identifier, token])
// }
